#pragma kernel ExternalForces
#pragma kernel UpdateSpatialHash
#pragma kernel Reorder
#pragma kernel ReorderCopyback
#pragma kernel CalculateDensities
#pragma kernel CalculatePressureForce
#pragma kernel CalculateViscosity
#pragma kernel UpdatePositions

#include "./FluidMaths2D.hlsl"
#include "./SpatialHash.hlsl"

#define FLT_MAX 3.402823466e+38
#define MAX_OBSTACLES 256

struct Obstacle
{
    float2 centre;
    int vertexStart;
    int vertexCount;
    float lineWidth;
    int obstacleType;
};

StructuredBuffer<Obstacle> ObstaclesBuffer;
StructuredBuffer<float2> VerticesBuffer;
RWStructuredBuffer<int4> CollisionBuffer;
RWStructuredBuffer<int> ParticleTypeBuffer;

int numObstacles;
float areaToColorAroundObstacles;
float coloredAreaAroundObstaclesDivider;
static const int NumThreads = 64;

RWStructuredBuffer<float2> Positions;
RWStructuredBuffer<float2> PredictedPositions;
RWStructuredBuffer<float2> Velocities;
RWStructuredBuffer<float2> Densities;
StructuredBuffer<float> GravityScales;

RWStructuredBuffer<uint> SpatialKeys;
RWStructuredBuffer<uint> SpatialOffsets;
StructuredBuffer<uint> SortedIndices;

const uint numParticles;
const float gravity;
const float deltaTime;
const float collisionDamping;
const float smoothingRadius;

float waterTargetDensity;
float waterPressureMultiplier;
float waterNearPressureMultiplier;
float waterViscosityStrength;
float oilTargetDensity;
float oilPressureMultiplier;
float oilNearPressureMultiplier;
float oilViscosityStrength;

const float2 boundsSize;
const float yOffset;
const float2 interactionInputPoint;
const float interactionInputStrength;
const float interactionInputRadius;

const float mouseGravityStrength;
const float mouseGravityRadius;
const int invertMouseGravity;
const float2 mousePosition;
const int gKeyPressed;

float DensityKernel(float dst, float radius)
{
    return SpikyKernelPow2(dst, radius);
}
float NearDensityKernel(float dst, float radius)
{
    return SpikyKernelPow3(dst, radius);
}
float DensityDerivative(float dst, float radius)
{
    return DerivativeSpikyPow2(dst, radius);
}
float NearDensityDerivative(float dst, float radius)
{
    return DerivativeSpikyPow3(dst, radius);
}
float ViscosityKernel(float dst, float radius)
{
    return SmoothingKernelPoly6(dst, smoothingRadius);
}

float2 CalculateDensity(float2 pos)
{
    int2 originCell = GetCell2D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;
    float density = 0;
    float nearDensity = 0;

    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D(originCell + offsets2D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];

        while (currIndex < numParticles)
        {
            uint neighbourIndex = currIndex;
            currIndex++;

            uint neighbourKey = SpatialKeys[neighbourIndex];
            if (neighbourKey != key)
                break;

            float2 neighbourPos = PredictedPositions[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            if (sqrDstToNeighbour > sqrRadius)
                continue;

            float dst = sqrt(sqrDstToNeighbour);
            density += DensityKernel(dst, smoothingRadius);
            nearDensity += NearDensityKernel(dst, smoothingRadius);
        }
    }

    return float2(density, nearDensity);
}

float PressureFromDensity(float density, float targetDensity, float pressureMultiplier)
{
    return (density - targetDensity) * pressureMultiplier;
}
float NearPressureFromDensity(float nearDensity, float nearPressureMultiplier)
{
    return nearPressureMultiplier * nearDensity;
}

float2 ExternalForces(float2 pos, float2 velocity, float gravityScale)
{
    float2 gravityAccel = float2(0, gravity * gravityScale);

    if (interactionInputStrength != 0)
    {
        float2 inputPointOffset = interactionInputPoint - pos;
        float sqrDst = dot(inputPointOffset, inputPointOffset);
        if (sqrDst < interactionInputRadius * interactionInputRadius)
        {
            float dst = sqrt(sqrDst);
            float edgeT = (dst / interactionInputRadius);
            float centreT = 1 - edgeT;
            float2 dirToCentre = inputPointOffset / max(dst, 0.0001);

            float2 interactionForce = dirToCentre * interactionInputStrength * centreT;
            gravityAccel += interactionForce;
            gravityAccel -= velocity * centreT * 0.5;
        }
    }

    return gravityAccel;
}

// Optimized HandleCollisions - Focused on reducing expensive operations (sqrt, normalization)
// and minimizing work inside the inner vertex loop after performance degradation was observed.
void HandleCollisions(uint particleIndex)
{
    float2 pos = Positions[particleIndex];
    float2 vel = Velocities[particleIndex];
    int particleType = ParticleTypeBuffer[particleIndex];

    // --- Pre-calculations (Avoid redundant calculations later) ---
    const float2 halfSize = boundsSize * 0.5;
    const float boundaryEpsilon = 0.001f; // Small offset for boundary push-off

    // Pre-calculate squared distances for coloring checks to avoid sqrt() later
    float areaToColorAroundObstaclesSq = areaToColorAroundObstacles * areaToColorAroundObstacles;
    float secondaryColorDist = areaToColorAroundObstacles + coloredAreaAroundObstaclesDivider;
    float secondaryColorDistSq = secondaryColorDist * secondaryColorDist;

    // Collision state tracking
    int collisionIndices[4] = { -1, -1, -1, -1 }; // Store indices for coloring
    int consideredObstacles = 0; // Counter for coloring indices array


    // --- 1. Boundary Collisions ---
    // Simplified, direct boundary check and response using pre-calculated halfSize.
    // Using abs() avoids branching on sign().
    if (abs(pos.x) >= halfSize.x)
    {
        pos.x = (halfSize.x - boundaryEpsilon) * sign(pos.x); // Push slightly off boundary
        vel.x *= -collisionDamping; // Reflect and dampen normal velocity
    }
    if (abs(pos.y) >= halfSize.y)
    {
        pos.y = (halfSize.y - boundaryEpsilon) * sign(pos.y); // Push slightly off boundary
        vel.y *= -collisionDamping; // Reflect and dampen normal velocity
    }


    // --- 2. Obstacle Collisions ---
    // Loop over relevant obstacles, capped at compile-time MAX_OBSTACLES for safety.
    // [loop] attribute can sometimes help the compiler optimize, mileage may vary.
    [loop]
    for (int obstacleIdx = 0; obstacleIdx < numObstacles && obstacleIdx < MAX_OBSTACLES; obstacleIdx++)
    {
        Obstacle obstacle = ObstaclesBuffer[obstacleIdx];
        int vertexStart = obstacle.vertexStart;
        int vertexCount = obstacle.vertexCount;

        // Skip degenerate obstacles early. Need >= 2 vertices for a line/polygon edge.
        if (vertexCount < 2)
            continue;

        float lineWidth = obstacle.lineWidth;

        // --- Per-Obstacle Pre-calculations ---
        // Calculate squared collision padding distance once per obstacle.
        // TODO: Consider making particleRadius a uniform if it's consistent.
        float particleRadius = 0.1f;
        float collisionPadding = particleRadius + (lineWidth * 0.5f);
        float collisionPaddingSq = collisionPadding * collisionPadding; // Key optimization: compare squared distances

        // --- State for finding closest point and raycasting ---
        int intersections = 0;
        float minDistSq = FLT_MAX; // Track minimum *squared* distance
        float2 normalAtClosestPoint = float2(0, 0); // Normal associated with minDistSq


        // --- Inner Loop: Iterate through obstacle vertices/edges ---
        // This is the performance-critical loop. Minimize work inside.
        [loop]
        for (int j = 0; j < vertexCount; j++)
        {
            // Fetch vertices for the current edge segment (a -> b)
            int nextJ = uint(j + 1) % uint(vertexCount); // Modulo for polygon wrapping
            float2 a = VerticesBuffer[vertexStart + j];
            float2 b = VerticesBuffer[vertexStart + nextJ];
            float2 edge = b - a;
            float2 vecToA = pos - a; // Vector from start vertex to particle position

            // --- Closest point on edge segment calculation ---
            float edgeLengthSq = dot(edge, edge);
            float2 pointOnEdge;
            // Use squared length check to handle degenerate edges (a == b)
            if (edgeLengthSq > 1e-6f)
            {
                // Project vecToA onto edge, clamp projection factor t to [0, 1] for segment
                float t = clamp(dot(vecToA, edge) / edgeLengthSq, 0.0, 1.0);
                pointOnEdge = a + t * edge;
            }
            else
            {
                pointOnEdge = a; // If edge is degenerate, closest point is the vertex itself
            }

            // --- Distance Check (Squared) ---
            float2 offsetToEdgePoint = pos - pointOnEdge;
            float distSq = dot(offsetToEdgePoint, offsetToEdgePoint); // Calculate squared distance

            // Update minimum squared distance and associated normal if this point is closer
            if (distSq < minDistSq)
            {
                minDistSq = distSq;
                // Calculate the normal *only* when minDistSq is updated.
                // Avoid sqrt via normalize() if possible, but needed for direction.
                // Check for zero distance to avoid normalizing zero vector.
                if (distSq > 1e-6f)
                {
                     // Standard normalize(). rsqrt() could be faster but less precise.
                    normalAtClosestPoint = normalize(offsetToEdgePoint);
                    // alternative: normalAtClosestPoint = offsetToEdgePoint * rsqrt(distSq);
                }
                else
                {
                    // Particle is exactly on the edge/vertex. Need a fallback normal.
                    // Derive from edge perpendicular if edge exists, otherwise use arbitrary axis.
                    // This normal might not consistently point "out" if particle is exactly on vertex.
                    // `isInside` check later helps resolve ambiguity.
                    if (edgeLengthSq > 1e-6f)
                    {
                        float2 edgeDir = normalize(edge); // Need normalize here to get direction
                        normalAtClosestPoint = normalize(float2(-edgeDir.y, edgeDir.x)); // Ensure unit length
                    }
                    else
                    {
                        normalAtClosestPoint = float2(0, 1); // Arbitrary fallback for point obstacle
                    }
                }
            } // End distance update check

            // --- Raycasting Test (Only for polygons, vertexCount >= 3) ---
            // Optimized check slightly by calculating intersectX only if y-range matches.
            if (vertexCount >= 3 && ((a.y <= pos.y && pos.y < b.y) || (b.y <= pos.y && pos.y < a.y)))
            {
                 // Avoid division by zero for horizontal lines (check y diff)
                if (abs(b.y - a.y) > 1e-6f)
                {
                    // Calculate horizontal intersection point of ray from pos
                    float intersectX = a.x + (b.x - a.x) * (pos.y - a.y) / (b.y - a.y);
                    if (pos.x < intersectX)
                    { // Count intersections to the right
                        intersections++;
                    }
                }
                 // else: Horizontal line aligned with ray - typically ignored in robust point-in-polygon.
            } // End raycasting check

        } // --- End Inner Vertex Loop ---


        // --- Determine Inside/Outside & Collision Status (using squared distances) ---
        // Correct odd-even rule check for point-in-polygon (requires vertexCount >= 3).
        bool isInside = (vertexCount >= 3) && ((uint(intersections) % 2) != 0);

        // Collision check: Inside OR outside but closer than squared padding distance.
        // This comparison avoids sqrt().
        bool collisionDetected = isInside || (minDistSq < collisionPaddingSq);

        // --- Coloring Logic (using squared distances) ---
        // Updated only if space available in collisionIndices and particle is close enough.
        // Uses squared distance checks, runs independent of collision response.
        if (isInside && particleType > 0 && (obstacle.obstacleType == 0 || obstacle.obstacleType == 2))
        {
            //Remove particle
        }
        else if (consideredObstacles < 4 && obstacle.obstacleType == 0)
        {
             // Use else-if to assign only one category per obstacle
            if (minDistSq < areaToColorAroundObstaclesSq && particleType > 0)
            {
                collisionIndices[consideredObstacles] = obstacleIdx;
                consideredObstacles++;
            }
            else if (minDistSq < secondaryColorDistSq)
            {
                collisionIndices[consideredObstacles] = -2;
                consideredObstacles++;
            }
        }

        // --- Collision Response --- Executes only if collision is detected.
        if (collisionDetected && (obstacle.obstacleType == 0 || obstacle.obstacleType == 1))
        {
            // CRITICAL OPTIMIZATION: Calculate sqrt(minDistSq) *only once* here, if needed.
            float actualDistance = sqrt(minDistSq);

            // Calculate penetration depth based on whether particle is inside or just overlapping padding.
            float penetrationDepth;
            if (isInside)
            {
                 // If inside, push out by current distance + padding.
                penetrationDepth = actualDistance + collisionPadding;
            }
            else
            { // Outside but within padding.
                 // If outside, push out just enough to clear the padding overlap.
                penetrationDepth = collisionPadding - actualDistance;
            }
            penetrationDepth += 0.001f; // Add epsilon to ensure clear separation.

            // Apply positional correction along the calculated normal.
            pos += normalAtClosestPoint * penetrationDepth;

            // --- Velocity Response ---
            // Calculate speed along the collision normal.
            float normalSpeed = dot(vel, normalAtClosestPoint);

            // Respond only if particle is moving *into* the obstacle surface (normalSpeed < 0).
            if (normalSpeed < 0)
            {
                // Decompose velocity into normal and tangential components.
                float2 tangentVel = vel - normalAtClosestPoint * normalSpeed;
                float2 normalVel = -normalAtClosestPoint * normalSpeed * collisionDamping; // Apply damping factor for bounce restitution.

                // Apply friction to the tangential component.
                // TODO: Make friction factor a uniform parameter.
                float friction = 0.1f;
                vel = tangentVel * (1.0f - friction) + normalVel; // Recombine components.
            }
            // else: Particle moving away or parallel, no velocity correction needed.

        } // --- End Collision Response ---

    } // --- End Outer Obstacle Loop ---


    // --- Write Back Results ---
    // Update particle state in the buffers.
    CollisionBuffer[particleIndex] = int4(collisionIndices[0], collisionIndices[1], collisionIndices[2], collisionIndices[3]);
    Positions[particleIndex] = pos;
    Velocities[particleIndex] = vel;
}

[numthreads(NumThreads, 1, 1)]
void ExternalForces(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;

    float gravityScale = GravityScales[id.x];
    float2 pos = Positions[id.x];
    float2 toMouse = mousePosition - pos;
    float mouseDist = length(toMouse);

    if (mouseDist < mouseGravityRadius && mouseDist > 0 && gKeyPressed)
    {
        float2 mouseDir = toMouse / mouseDist;
        float falloff = 1 - (mouseDist / mouseGravityRadius);
        float mouseInfluence = mouseGravityStrength * falloff;
        if (invertMouseGravity)
            mouseInfluence *= -1;
        gravityScale += mouseInfluence;
    }

    Velocities[id.x] += ExternalForces(pos, Velocities[id.x], gravityScale) * deltaTime;
    PredictedPositions[id.x] = pos + Velocities[id.x] * (1 / 120.0);
}

[numthreads(NumThreads, 1, 1)]
void UpdateSpatialHash(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;
    uint index = id.x;
    int2 cell = GetCell2D(PredictedPositions[index], smoothingRadius);
    uint hash = HashCell2D(cell);
    uint key = KeyFromHash(hash, numParticles);
    SpatialKeys[id.x] = key;
}

RWStructuredBuffer<float2> SortTarget_Positions;
RWStructuredBuffer<float2> SortTarget_PredictedPositions;
RWStructuredBuffer<float2> SortTarget_Velocities;
RWStructuredBuffer<int> SortTarget_ParticleType;

[numthreads(NumThreads, 1, 1)]
void Reorder(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;
    uint sortedIndex = SortedIndices[id.x];
    SortTarget_Positions[id.x] = Positions[sortedIndex];
    SortTarget_PredictedPositions[id.x] = PredictedPositions[sortedIndex];
    SortTarget_Velocities[id.x] = Velocities[sortedIndex];
    SortTarget_ParticleType[id.x] = ParticleTypeBuffer[sortedIndex];
}

[numthreads(NumThreads, 1, 1)]
void ReorderCopyback(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;
    Positions[id.x] = SortTarget_Positions[id.x];
    PredictedPositions[id.x] = SortTarget_PredictedPositions[id.x];
    Velocities[id.x] = SortTarget_Velocities[id.x];
    ParticleTypeBuffer[id.x] = SortTarget_ParticleType[id.x];
}

[numthreads(NumThreads, 1, 1)]
void CalculateDensities(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles || ParticleTypeBuffer[id.x] == -1)
        return;
    float2 pos = PredictedPositions[id.x];
    Densities[id.x] = CalculateDensity(pos);
}

[numthreads(NumThreads, 1, 1)]
void CalculatePressureForce(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles || ParticleTypeBuffer[id.x] == -1)
        return;
    
    float targetDensity = ParticleTypeBuffer[id.x] == 0 ? waterTargetDensity : oilTargetDensity;
    float pressureMultiplier = ParticleTypeBuffer[id.x] == 0 ? waterPressureMultiplier : oilPressureMultiplier;
    float nearPressureMultiplier = ParticleTypeBuffer[id.x] == 0 ? waterNearPressureMultiplier : oilNearPressureMultiplier;
    float density = Densities[id.x][0];
    float densityNear = Densities[id.x][1];
    float pressure = PressureFromDensity(density, targetDensity, pressureMultiplier);
    float nearPressure = NearPressureFromDensity(densityNear, nearPressureMultiplier);
    float2 pressureForce = 0;

    float2 pos = PredictedPositions[id.x];
    int2 originCell = GetCell2D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;

    for (int i = 0; i < 9; i++)
    {        
        uint hash = HashCell2D(originCell + offsets2D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];

        while (currIndex < numParticles)
        {
            uint neighbourIndex = currIndex;
            currIndex++;

            if (neighbourIndex == id.x)
                continue;
            uint neighbourKey = SpatialKeys[neighbourIndex];
            if (neighbourKey != key)
                break;

            float2 neighbourPos = PredictedPositions[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            if (sqrDstToNeighbour > sqrRadius)
                continue;

            float dst = sqrt(sqrDstToNeighbour);
            float2 dirToNeighbour = dst > 0 ? offsetToNeighbour / dst : float2(0, 1);
            
            float neighbourTargetDensity = ParticleTypeBuffer[neighbourIndex] == 0 ? waterTargetDensity : oilTargetDensity;
            float neighbourPressureMultiplier = ParticleTypeBuffer[neighbourIndex] == 0 ? waterPressureMultiplier : oilPressureMultiplier;
            float neighbourNearPressureMultiplier = ParticleTypeBuffer[neighbourIndex] == 0 ? waterNearPressureMultiplier : oilNearPressureMultiplier;

            float neighbourDensity = Densities[neighbourIndex][0];
            float neighbourNearDensity = Densities[neighbourIndex][1];
            float neighbourPressure = PressureFromDensity(neighbourDensity, neighbourTargetDensity-density, neighbourPressureMultiplier);
            float neighbourNearPressure = NearPressureFromDensity(neighbourNearDensity, neighbourNearPressureMultiplier);

            float sharedPressure = (pressure + neighbourPressure) * 0.5;
            float sharedNearPressure = (nearPressure + neighbourNearPressure) * 0.5;

            pressureForce += dirToNeighbour * DensityDerivative(dst, smoothingRadius) * sharedPressure / neighbourDensity;
            pressureForce += dirToNeighbour * NearDensityDerivative(dst, smoothingRadius) * sharedNearPressure / neighbourNearDensity;
        }
    }

    float2 acceleration = pressureForce / density;
    Velocities[id.x] += acceleration * deltaTime;
}

[numthreads(NumThreads, 1, 1)]
void CalculateViscosity(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles || ParticleTypeBuffer[id.x] == -1)
        return;

    float2 pos = PredictedPositions[id.x];
    int2 originCell = GetCell2D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;
    float2 viscosityForce = 0;
    float2 velocity = Velocities[id.x];

    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D(originCell + offsets2D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];

        while (currIndex < numParticles)
        {
            uint neighbourIndex = currIndex;
            currIndex++;

            if (neighbourIndex == id.x)
                continue;
            uint neighbourKey = SpatialKeys[neighbourIndex];
            if (neighbourKey != key)
                break;

            float2 neighbourPos = PredictedPositions[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            if (sqrDstToNeighbour > sqrRadius)
                continue;

            float dst = sqrt(sqrDstToNeighbour);
            float2 neighbourVelocity = Velocities[neighbourIndex];
            viscosityForce += (neighbourVelocity - velocity) * ViscosityKernel(dst, smoothingRadius);
        }
    }
    
    float viscosityStrength = ParticleTypeBuffer[id.x] == 0 ? waterViscosityStrength : oilViscosityStrength;
    Velocities[id.x] += viscosityForce * viscosityStrength * deltaTime;
}

[numthreads(NumThreads, 1, 1)]
void UpdatePositions(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;
    Positions[id.x] += Velocities[id.x] * deltaTime;
    HandleCollisions(id.x);
}
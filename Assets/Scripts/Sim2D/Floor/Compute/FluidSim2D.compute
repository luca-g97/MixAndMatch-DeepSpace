#pragma kernel ExternalForces
#pragma kernel UpdateSpatialHash
#pragma kernel Reorder
#pragma kernel ReorderCopyback
#pragma kernel CalculateDensities
#pragma kernel CalculatePressureForce
#pragma kernel CalculateViscosity
#pragma kernel UpdatePositions
#pragma kernel ResetCompactionCounter
#pragma kernel CompactAndMoveParticles
#pragma kernel CopyCollisionBuffer
#pragma kernel ClearRemovedParticlesBuffer
#pragma kernel ClearObstacleGrid
#pragma kernel BuildObstacleGrid 

#include "./FluidMaths2D.hlsl"
#include "./SpatialHash.hlsl"

#define FLT_MAX 3.402823466e+38
#define MAX_OBSTACLES 256

struct ParticleData
{
    float2 position;
    float2 predictedPosition;
    float2 velocity;
    int2 particleType;
    int4 collision;
    float2 density;
    float gravityScale;
    float padding; // To match the C# struct layout
};

struct Obstacle
{
    float2 centre;
    int vertexStart;
    int vertexCount;
    float lineWidth;
    int obstacleType;
    float4 aabb;
};

struct Current
{
    int vertexStart;
    int vertexCount;
    float maxVelocity;
    float width;
    float linearFactor;
};

// Buffers used across many kernels (can be RW)
RWStructuredBuffer<float2> Positions;
RWStructuredBuffer<float2> PredictedPositions;
RWStructuredBuffer<float2> Velocities;
RWStructuredBuffer<float2> Densities;
RWStructuredBuffer<float> GravityScales;
RWStructuredBuffer<int4> CollisionBuffer;
RWStructuredBuffer<int2> ParticleTypeBuffer;
RWStructuredBuffer<uint> SpatialKeys;
RWStructuredBuffer<uint> SpatialOffsets;
RWStructuredBuffer<int4> CopiedCollisionBuffer_Destination;

// Buffers that are read-only in most contexts
StructuredBuffer<uint> SortedIndices;
StructuredBuffer<Obstacle> ObstaclesBuffer;
StructuredBuffer<float2> VerticesBuffer;
StructuredBuffer<Current> CurrentsBuffer;
StructuredBuffer<float2> CurrentVerticesBuffer;
StructuredBuffer<int4> OriginalCollisionBuffer_Source;

// --- Buffers for Compaction Kernel ---
// NOTE: These are the destinations, so they MUST be RW (UAVs)
RWStructuredBuffer<ParticleData> SortTarget_Data;

// This is the atomic counter, it MUST be RW (UAV)
RWStructuredBuffer<int2> CompactionInfoBuffer;
RWStructuredBuffer<int2> RemovedParticlesBuffer;

// This is read-only for the compaction kernel, so it is NOT a UAV
StructuredBuffer<float4> ObstacleColorsBuffer;

StructuredBuffer<float2> Source_Positions;
StructuredBuffer<float2> Source_PredictedPositions;
StructuredBuffer<float2> Source_Velocities;
StructuredBuffer<float2> Source_Densities;
StructuredBuffer<float> Source_GravityScales;
StructuredBuffer<int2> Source_ParticleType;
StructuredBuffer<int4> Source_Collision;

// Aliases for the REORDERCOPYBACK kernel's source data
StructuredBuffer<ParticleData> CopySource_Data;

RWStructuredBuffer<uint> ObstacleGridCounts;
RWStructuredBuffer<uint> ObstacleGrid;

float obstacleGridCellSize;
int2 obstacleGridDims;
int maxObstaclesPerCell;

int numObstacles;
float areaToColorAroundObstacles;
float coloredAreaAroundObstaclesDivider;
float minDistanceToRemoveParticles;
static const int NumThreads = 64;
int numCurrents;

float4 mixableColors[12];
int mixableColorsSize;

const uint numParticles;
const float gravity;
const float deltaTime;
const float collisionDamping;
const float smoothingRadius;

float waterTargetDensity;
float waterPressureMultiplier;
float waterNearPressureMultiplier;
float waterViscosityStrength;
float oilTargetDensity;
float oilPressureMultiplier;
float oilNearPressureMultiplier;
float oilViscosityStrength;

const float2 boundsSize;
const float yOffset;
const float2 interactionInputPoint;
const float interactionInputStrength;
const float interactionInputRadius;

const float mouseGravityStrength;
const float mouseGravityRadius;
const int invertMouseGravity;
const float2 mousePosition;
const int gKeyPressed;

float DensityKernel(float dst, float radius)
{
    return SpikyKernelPow2(dst, radius);
}
float NearDensityKernel(float dst, float radius)
{
    return SpikyKernelPow3(dst, radius);
}
float DensityDerivative(float dst, float radius)
{
    return DerivativeSpikyPow2(dst, radius);
}
float NearDensityDerivative(float dst, float radius)
{
    return DerivativeSpikyPow3(dst, radius);
}
float ViscosityKernel(float dst, float radius)
{
    return SmoothingKernelPoly6(dst, smoothingRadius);
}

float ViscosityKernelSqr(float sqrDst, float sqrRadius)
{
    float val = max(0, sqrRadius - sqrDst);
    return Poly6ScalingFactor * val * val * val;
}

float2 CalculateDensity(float2 pos)
{
    int2 originCell = GetCell2D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;
    float density = 0;
    float nearDensity = 0;

    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D(originCell + offsets2D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];

        while (currIndex < numParticles)
        {
            uint neighbourIndex = currIndex;
            currIndex++;

            uint neighbourKey = SpatialKeys[neighbourIndex];
            if (neighbourKey != key)
                break;

            float2 neighbourPos = PredictedPositions[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            if (sqrDstToNeighbour > sqrRadius)
                continue;

            float dst = sqrt(sqrDstToNeighbour);
            density += DensityKernel(dst, smoothingRadius);
            nearDensity += NearDensityKernel(dst, smoothingRadius);
        }
    }

    return float2(density, nearDensity);
}

float PressureFromDensity(float density, float targetDensity, float pressureMultiplier)
{
    return (density - targetDensity) * pressureMultiplier;
}
float NearPressureFromDensity(float nearDensity, float nearPressureMultiplier)
{
    return nearPressureMultiplier * nearDensity;
}

float2 ExternalForces(float2 pos, float2 velocity, float gravityScale)
{
    float2 gravityAccel = float2(0, gravity * gravityScale);

    if (interactionInputStrength != 0)
    {
        float2 inputPointOffset = interactionInputPoint - pos;
        float sqrDst = dot(inputPointOffset, inputPointOffset);
        if (sqrDst < interactionInputRadius * interactionInputRadius)
        {
            float dst = sqrt(sqrDst);
            float edgeT = (dst / interactionInputRadius);
            float centreT = 1 - edgeT;
            float2 dirToCentre = inputPointOffset / max(dst, 0.0001);

            float2 interactionForce = dirToCentre * interactionInputStrength * centreT;
            gravityAccel += interactionForce;
            gravityAccel -= velocity * centreT * 0.5;
        }
    }

    return gravityAccel;
}

void HandleCollisions(uint particleIndex)
{
    float2 pos = Positions[particleIndex];
    float2 vel = Velocities[particleIndex];
    int particleType = ParticleTypeBuffer[particleIndex][0];
    int particleProcessFlag = ParticleTypeBuffer[particleIndex][1];

    if (particleType < 0)
        return; // Skip already processed/dead particles

    // --- 1. BOUNDARY COLLISIONS ---
    const float2 halfSize = boundsSize * 0.5;
    const float boundaryEpsilon = 0.001f;
    if (abs(pos.x) >= halfSize.x)
    {
        pos.x = (halfSize.x - boundaryEpsilon) * sign(pos.x);
        vel.x *= -collisionDamping;
    }
    if (abs(pos.y) >= halfSize.y)
    {
        pos.y = (halfSize.y - boundaryEpsilon) * sign(pos.y);
        vel.y *= -collisionDamping;
    }
    
    // --- 2. OBSTACLE COLLISIONS (Using the Grid) ---
    // These variables must be declared before the loops to accumulate results
    int collisionIndices[4] = { -1, -1, -1, -1 };
    int consideredObstacles = 0;
    
    // Pre-calculate values for highlighting logic
    float areaToColorAroundObstaclesSq = areaToColorAroundObstacles * areaToColorAroundObstacles;
    float minDistanceToRemoveParticlesSq = minDistanceToRemoveParticles * minDistanceToRemoveParticles;
    float secondaryColorDist = areaToColorAroundObstacles + coloredAreaAroundObstaclesDivider;
    float secondaryColorDistSq = secondaryColorDist * secondaryColorDist;

    int2 particleCellCoords = (int2) floor(pos / obstacleGridCellSize);
    
    [loop]
    for (int y = -1; y <= 1; y++)
    {
        [loop]
        for (int x = -1; x <= 1; x++)
        {
            int2 sampleCellCoords = particleCellCoords + int2(x, y);

            if (sampleCellCoords.x >= 0 && sampleCellCoords.x < obstacleGridDims.x && sampleCellCoords.y >= 0 && sampleCellCoords.y < obstacleGridDims.y)
            {
                uint cellIndex = (uint) (sampleCellCoords.y * obstacleGridDims.x + sampleCellCoords.x);
                uint numLocalObstacles = min((uint) maxObstaclesPerCell, ObstacleGridCounts[cellIndex]);
                uint gridStartIndex = cellIndex * maxObstaclesPerCell;

                [loop]
                for (uint i = 0; i < numLocalObstacles; i++)
                {
                    uint obstacleIdx = ObstacleGrid[gridStartIndex + i];
                    Obstacle obstacle = ObstaclesBuffer[obstacleIdx];
                    
                    // --- 2a. BROAD PHASE (AABB Check) ---
                    if (pos.x < obstacle.aabb.x || pos.x > obstacle.aabb.z || pos.y < obstacle.aabb.y || pos.y > obstacle.aabb.w)
                    {
                        continue;
                    }
                    
                    // --- 2b. NARROW PHASE (Your original, precise logic) ---
                    int intersections = 0;
                    float minDistSq = FLT_MAX;
                    float2 normalAtClosestPoint = float2(0, 0);

                    [loop]
                    for (int j = 0; j < obstacle.vertexCount; j++)
                    {
                        int nextJ = (uint) (j + 1) % (uint) obstacle.vertexCount;
                        float2 a = VerticesBuffer[obstacle.vertexStart + j];
                        float2 b = VerticesBuffer[obstacle.vertexStart + nextJ];
                        float2 edge = b - a;
                        float2 vecToA = pos - a;

                        float edgeLengthSq = dot(edge, edge);
                        float2 pointOnEdge = a + clamp(dot(vecToA, edge) / max(edgeLengthSq, 1e-6f), 0.0, 1.0) * edge;
                        
                        float2 offsetToPoint = pos - pointOnEdge;
                        float distSq = dot(offsetToPoint, offsetToPoint);

                        if (distSq < minDistSq)
                        {
                            minDistSq = distSq;
                            if (distSq > 1e-6f)
                            {
                                normalAtClosestPoint = normalize(pos - pointOnEdge);
                            }
                            else
                            {
                                float2 edgeDir = normalize(edge);
                                normalAtClosestPoint = normalize(float2(-edgeDir.y, edgeDir.x));
                            }
                        }

                        if (obstacle.vertexCount >= 3 && ((a.y <= pos.y && pos.y < b.y) || (b.y <= pos.y && pos.y < a.y)))
                        {
                            if (abs(b.y - a.y) > 1e-6f)
                            {
                                if (pos.x < a.x + (b.x - a.x) * (pos.y - a.y) / (b.y - a.y))
                                {
                                    intersections++;
                                }
                            }
                        }
                    }

                    bool isInside = (obstacle.vertexCount >= 3) && ((uint(intersections) % 2) != 0);
                    
                    if (particleType > 0)
                    {
                        if (obstacle.obstacleType == 0) // Player Obstacle
                        {
                            if (consideredObstacles < 4)
                            {
                                if (minDistSq < areaToColorAroundObstaclesSq)
                                {
                                    collisionIndices[consideredObstacles] = obstacleIdx;
                                    consideredObstacles++;
                                }
                                else if (minDistSq < secondaryColorDistSq)
                                {
                                    collisionIndices[consideredObstacles] = -2;
                                    consideredObstacles++;
                                }
                            }
                            if (ParticleTypeBuffer[particleIndex][1] == -1 && minDistSq <= minDistanceToRemoveParticlesSq)
                            {
                                ParticleTypeBuffer[particleIndex][1] = obstacleIdx;
                            }
                        }
                        else if (obstacle.obstacleType == 2 && ParticleTypeBuffer[particleIndex][1] == -1 && isInside) // Ventil
                        {
                            ParticleTypeBuffer[particleIndex][1] = -(int)obstacleIdx - 10;
                        }
                    }

                    bool collisionDetected = isInside || (minDistSq < 0.0001f);
                    if (particleType >= 0 && collisionDetected && (obstacle.obstacleType == 0 || obstacle.obstacleType == 1))
                    {
                        float penetrationDepth = isInside ? sqrt(minDistSq) : 0;
                        pos += normalAtClosestPoint * (penetrationDepth + 0.001f);
                        float normalSpeed = dot(vel, normalAtClosestPoint);
                        if (normalSpeed < 0)
                        {
                            float2 tangentVel = vel - normalAtClosestPoint * normalSpeed;
                            float2 normalVel = -normalAtClosestPoint * normalSpeed * collisionDamping;
                            vel = tangentVel * (1.0f - 0.1f) + normalVel;
                        }
                    }
                }
            }
        }
    }

    // --- 3. WRITE BACK FINAL DATA ---
    CollisionBuffer[particleIndex] = int4(collisionIndices[0], collisionIndices[1], collisionIndices[2], collisionIndices[3]);
    Positions[particleIndex] = pos;
    Velocities[particleIndex] = vel;
}

[numthreads(NumThreads, 1, 1)]
void ExternalForces(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;

    float gravityScale = GravityScales[id.x];
    float2 pos = Positions[id.x];
    float2 toMouse = mousePosition - pos;
    float mouseDist = length(toMouse);

    if (mouseDist < mouseGravityRadius && mouseDist > 0 && gKeyPressed)
    {
        float2 mouseDir = toMouse / mouseDist;
        float falloff = 1 - (mouseDist / mouseGravityRadius);
        float mouseInfluence = mouseGravityStrength * falloff;
        if (invertMouseGravity)
            mouseInfluence *= -1;
        gravityScale += mouseInfluence;
    }

    Velocities[id.x] += ExternalForces(pos, Velocities[id.x], gravityScale) * deltaTime;
    PredictedPositions[id.x] = pos + Velocities[id.x] * (1 / 120.0);
}

[numthreads(NumThreads, 1, 1)]
void UpdateSpatialHash(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;
    uint index = id.x;
    int2 cell = GetCell2D(PredictedPositions[index], smoothingRadius);
    uint hash = HashCell2D(cell);
    uint key = KeyFromHash(hash, numParticles);
    SpatialKeys[id.x] = key;
}

void ApplyCurrentForces(uint particleIndex, float2 pos)
{    
    for (int currentIdx = 0; currentIdx < numCurrents; currentIdx++)
    {        
        Current current = CurrentsBuffer[currentIdx];
        int numSegments = current.vertexCount - 1;
        
        if (numSegments < 1)
            continue;
        
        float closestDistSq = FLT_MAX;
        float2 closestDir = float2(0, 0);
        float maxStrength = 0;
        
        for (int segIdx = 0; segIdx < numSegments; segIdx++)
        {
            int pointIdx = current.vertexStart + segIdx;
            float2 a = CurrentVerticesBuffer[pointIdx];
            float2 b = CurrentVerticesBuffer[pointIdx + 1];
            
            float2 ab = b - a;
            float2 ap = pos - a;
            float lin_factor = clamp(dot(ap, ab) / dot(ab, ab), 0.0, 1.0);
            float2 closestPoint = a + lin_factor * ab;
            float2 toClosest = pos - closestPoint;
            float distSq = dot(toClosest, toClosest);
            
            if (distSq < current.width * current.width)
            {
                float dist = sqrt(distSq);
                float normalizedDist = dist / current.width;
                float strength = pow(abs(1.0 - normalizedDist), abs(1.0 + current.linearFactor));
                
                if (strength > maxStrength)
                {
                    maxStrength = strength;
                    closestDir = normalize(ab);
                    closestDistSq = distSq;
                }
            }
        }
        
        if (maxStrength > 0.001)
        {
            Velocities[particleIndex] += closestDir * current.maxVelocity * maxStrength;
        }
    } 
}

[numthreads(NumThreads, 1, 1)]
void Reorder(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;
    
    uint sortedIndex = SortedIndices[id.x];

    // Assemble the struct and write it once
    ParticleData p;
    p.position = Source_Positions[sortedIndex];
    p.predictedPosition = Source_PredictedPositions[sortedIndex];
    p.velocity = Source_Velocities[sortedIndex];
    p.particleType = Source_ParticleType[sortedIndex];
    p.collision = Source_Collision[sortedIndex];
    p.density = Source_Densities[sortedIndex];
    p.gravityScale = Source_GravityScales[sortedIndex];
    p.padding = 0;
    
    SortTarget_Data[id.x] = p;
}

[numthreads(NumThreads, 1, 1)]
void ReorderCopyback(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;

    // Read the struct once and unpack it
    ParticleData p = CopySource_Data[id.x];
    
    Positions[id.x] = p.position;
    PredictedPositions[id.x] = p.predictedPosition;
    Velocities[id.x] = p.velocity;
    ParticleTypeBuffer[id.x] = p.particleType;
    CollisionBuffer[id.x] = p.collision;
    Densities[id.x] = p.density;
    GravityScales[id.x] = p.gravityScale;
}

[numthreads(NumThreads, 1, 1)]
void CalculateDensities(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles || ParticleTypeBuffer[id.x][0] == -1)
        return;
    float2 pos = PredictedPositions[id.x];
    Densities[id.x] = CalculateDensity(pos);
}

[numthreads(NumThreads, 1, 1)]
void CalculatePressureForce(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles || ParticleTypeBuffer[id.x][0] == -1)
        return;

    float targetDensity = ParticleTypeBuffer[id.x][0] == 0 ? waterTargetDensity : oilTargetDensity;
    float pressureMultiplier = ParticleTypeBuffer[id.x][0] == 0 ? waterPressureMultiplier : oilPressureMultiplier;
    float nearPressureMultiplier = ParticleTypeBuffer[id.x][0] == 0 ? waterNearPressureMultiplier : oilNearPressureMultiplier;

    float density = Densities[id.x][0];
    float densityNear = Densities[id.x][1];
    float pressure = PressureFromDensity(density, targetDensity, pressureMultiplier);
    float nearPressure = NearPressureFromDensity(densityNear, nearPressureMultiplier);
    float2 pressureForce = 0;

    float2 pos = PredictedPositions[id.x];
    int2 originCell = GetCell2D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;

    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D(originCell + offsets2D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];

        while (currIndex < numParticles)
        {
            uint neighbourIndex = currIndex;
            currIndex++;

            if (neighbourIndex == id.x)
                continue;

            uint neighbourKey = SpatialKeys[neighbourIndex];
            if (neighbourKey != key)
                break;

            float2 neighbourPos = PredictedPositions[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            if (sqrDstToNeighbour > sqrRadius)
                continue;

            // --- SAFETY CHECKS FOR NEIGHBOUR DENSITY ---
            float neighbourDensity = Densities[neighbourIndex][0];
            if (neighbourDensity < 0.0001)
            {
                continue;
            }
            float neighbourNearDensity = Densities[neighbourIndex][1];
            if (neighbourNearDensity < 0.0001)
            {
                continue;
            }
            // ------------------------------------------

            float dst = sqrt(sqrDstToNeighbour);
            float2 dirToNeighbour = dst > 0 ? offsetToNeighbour / dst : float2(0, 1);

            float neighbourTargetDensity = ParticleTypeBuffer[neighbourIndex][0] == 0 ? waterTargetDensity : oilTargetDensity;
            float neighbourPressureMultiplier = ParticleTypeBuffer[neighbourIndex][0] == 0 ? waterPressureMultiplier : oilPressureMultiplier;
            float neighbourNearPressureMultiplier = ParticleTypeBuffer[neighbourIndex][0] == 0 ? waterNearPressureMultiplier : oilNearPressureMultiplier;
            
            float neighbourPressure = PressureFromDensity(neighbourDensity, neighbourTargetDensity - density, neighbourPressureMultiplier);
            float neighbourNearPressure = NearPressureFromDensity(neighbourNearDensity, neighbourNearPressureMultiplier);

            float sharedPressure = (pressure + neighbourPressure) * 0.5;
            float sharedNearPressure = (nearPressure + neighbourNearPressure) * 0.5;

            pressureForce += dirToNeighbour * DensityDerivative(dst, smoothingRadius) * sharedPressure / neighbourDensity;
            pressureForce += dirToNeighbour * NearDensityDerivative(dst, smoothingRadius) * sharedNearPressure / neighbourNearDensity;
        }
    }

    // --- SAFETY CHECK FOR OWN DENSITY ---
    if (density < 0.0001)
    {
        return; // Particle is isolated, no pressure force to apply.
    }
    // ------------------------------------

    float2 acceleration = pressureForce / density;
    Velocities[id.x] += acceleration * deltaTime;
}

[numthreads(NumThreads, 1, 1)]
void CalculateViscosity(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles || ParticleTypeBuffer[id.x][0] == -1)
        return;
    if (Densities[id.x][0] < 0.0001)
        return;

    float2 pos = PredictedPositions[id.x];
    int2 originCell = GetCell2D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;
    float2 viscosityForce = 0;
    float2 velocity = Velocities[id.x];

    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D(originCell + offsets2D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];

        while (currIndex < numParticles)
        {
            uint neighbourIndex = currIndex;
            currIndex++;

            if (neighbourIndex == id.x)
                continue;

            uint neighbourKey = SpatialKeys[neighbourIndex];
            if (neighbourKey != key)
                break;

            float2 neighbourPos = PredictedPositions[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            if (sqrDstToNeighbour < sqrRadius)
            {
                // Use the new, faster function with squared distance
                float2 neighbourVelocity = Velocities[neighbourIndex];
                viscosityForce += (neighbourVelocity - velocity) * ViscosityKernelSqr(sqrDstToNeighbour, sqrRadius);
            }
        }
    }

    float viscosityStrength = ParticleTypeBuffer[id.x][0] == 0 ? waterViscosityStrength : oilViscosityStrength;
    Velocities[id.x] += viscosityForce * viscosityStrength * deltaTime;
}

[numthreads(NumThreads, 1, 1)]
void UpdatePositions(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;

    ApplyCurrentForces(id.x, Positions[id.x]);
    Positions[id.x] += Velocities[id.x] * deltaTime;
    HandleCollisions(id.x);
}

[numthreads(1, 1, 1)]
void ResetCompactionCounter(uint3 id : SV_DispatchThreadID)
{
    CompactionInfoBuffer[0] = int2(0, 0);
}

[numthreads(NumThreads, 1, 1)]
void CompactAndMoveParticles(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;

    int particleTypeIndex = Source_ParticleType[id.x].x;
    int removalFlag = Source_ParticleType[id.x].y;
    bool shouldKeep = true;
    
    // --- Step 1: Get the particle's CURRENT VISUAL color from mixableColors ---
    int particleColorIndex = particleTypeIndex - 1;

    if (removalFlag <= -10) // Ventil removal
    {
        shouldKeep = false;
        removalFlag = abs(removalFlag + 10);
    }
    else if (removalFlag >= 0) // Player flagged this particle
    {
        if (particleTypeIndex > 0)
        {
            float3 particleVisualColor = mixableColors[particleColorIndex].rgb;

            // --- Step 2: Get the UNIQUE BASE colors of all nearby players ---
            int4 nearbyObstacleIndices = Source_Collision[id.x];
            float3 uniqueColors[4];
            int uniqueColorCount = 0;

            for (int i = 0; i < 4; i++)
            {
                int obsIndex = nearbyObstacleIndices[i];
                if (obsIndex >= 0)
                {
                    float3 obsColor = ObstacleColorsBuffer[obsIndex].rgb;
                    bool alreadyFound = false;
                    
                    if (uniqueColorCount > 0)
                    {
                        for (int j = 0; j < uniqueColorCount; j++)
                        {
                            if (distance(obsColor, uniqueColors[j]) < 0.001)
                            {
                                alreadyFound = true;
                                break;
                            }
                        }
                    }
                    
                    if (!alreadyFound && uniqueColorCount < 4)
                    {
                        uniqueColors[uniqueColorCount] = obsColor;
                        uniqueColorCount++;
                    }
                }
            }

            // --- Step 3: AVERAGE the unique base colors to get the resulting blend ---
            if (uniqueColorCount > 0)
            {
                float3 blendedColorSum = float3(0, 0, 0);
                for (int i = 0; i < uniqueColorCount; i++)
                {
                    blendedColorSum += uniqueColors[i];
                }
                float3 blendedColorAverage = blendedColorSum / uniqueColorCount;

                // --- Step 4: Compare the blend of base colors to the particle's current visual color ---
                if (distance(blendedColorAverage, particleVisualColor) < 0.02)
                {
                    shouldKeep = false;
                }
            }
        }
    }

    // Compaction Step...
    uint newIndex;
    int2 currentParticleTypeInfo = Source_ParticleType[id.x];
    
    if (!shouldKeep)
    {
        //Increment counter for removing particles
        InterlockedAdd(CompactionInfoBuffer[0][1], 1, newIndex);
        currentParticleTypeInfo.y = removalFlag;
        RemovedParticlesBuffer[newIndex] = currentParticleTypeInfo;
    }
    else
    {
        //Increment counter for staying particles
        InterlockedAdd(CompactionInfoBuffer[0][0], 1, newIndex);
        
        // Assemble the struct and write it once for the kept particle
        ParticleData p;
        p.position = Source_Positions[id.x];
        p.predictedPosition = Source_PredictedPositions[id.x];
        p.velocity = Source_Velocities[id.x];
        p.particleType = Source_ParticleType[id.x];
        p.particleType.y = -1; // Reset removal flag
        p.collision = Source_Collision[id.x];
        p.density = Source_Densities[id.x];
        p.gravityScale = Source_GravityScales[id.x];
        p.padding = 0;
        
        SortTarget_Data[newIndex] = p;
    }
}

[numthreads(256, 1, 1)]
void CopyCollisionBuffer(uint3 id : SV_DispatchThreadID)
{
    // Use the existing global 'numParticles' constant for the check.
    if (id.x >= numParticles)
    {
        return;
    }
    
    CopiedCollisionBuffer_Destination[id.x] = OriginalCollisionBuffer_Source[id.x];
}

[numthreads(256, 1, 1)]
void ClearRemovedParticlesBuffer(uint3 id : SV_DispatchThreadID)
{
    RemovedParticlesBuffer[id.x] = int2(-1, -1);
}

[numthreads(256, 1, 1)]
void ClearObstacleGrid(uint3 id : SV_DispatchThreadID)
{
    uint totalCells = (uint) (obstacleGridDims.x * obstacleGridDims.y);
    if (id.x >= totalCells)
        return;
    ObstacleGridCounts[id.x] = 0;
}

[numthreads(64, 1, 1)]
void BuildObstacleGrid(uint3 id : SV_DispatchThreadID)
{
    uint obstacleIndex = id.x;
    if (obstacleIndex >= (uint) numObstacles)
        return;

    Obstacle obstacle = ObstaclesBuffer[obstacleIndex];
    float4 aabb = obstacle.aabb;

    int2 minCell = (int2) floor(aabb.xy / obstacleGridCellSize);
    int2 maxCell = (int2) floor(aabb.zw / obstacleGridCellSize);

    for (int y = minCell.y; y <= maxCell.y; y++)
    {
        for (int x = minCell.x; x <= maxCell.x; x++)
        {
            int2 cellCoords = int2(x, y);
            if (cellCoords.x >= 0 && cellCoords.x < obstacleGridDims.x && cellCoords.y >= 0 && cellCoords.y < obstacleGridDims.y)
            {
                uint cellIndex = (uint) (cellCoords.y * obstacleGridDims.x + cellCoords.x);
                
                uint writeIndex;
                InterlockedAdd(ObstacleGridCounts[cellIndex], 1, writeIndex);

                if (writeIndex < (uint) maxObstaclesPerCell)
                {
                    ObstacleGrid[cellIndex * maxObstaclesPerCell + writeIndex] = obstacleIndex;
                }
            }
        }
    }
}
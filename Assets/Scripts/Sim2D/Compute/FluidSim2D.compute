#pragma kernel ExternalForces
#pragma kernel UpdateSpatialHash
#pragma kernel Reorder
#pragma kernel ReorderCopyback
#pragma kernel CalculateDensities
#pragma kernel CalculatePressureForce
#pragma kernel CalculateViscosity
#pragma kernel UpdatePositions

#include "./FluidMaths2D.hlsl"
#include "./SpatialHash.hlsl"

#define FLT_MAX 3.402823466e+38
#define MAX_OBSTACLES 256

struct Obstacle
{
    float2 centre;
    int vertexStart;
    int vertexCount;
    float lineWidth;
};

StructuredBuffer<Obstacle> obstaclesBuffer;
StructuredBuffer<float2> verticesBuffer;
RWStructuredBuffer<int4> CollisionBuffer;

int numObstacles;
float areaToColorAroundObstacles;
static const int NumThreads = 64;

RWStructuredBuffer<float2> Positions;
RWStructuredBuffer<float2> PredictedPositions;
RWStructuredBuffer<float2> Velocities;
RWStructuredBuffer<float2> Densities;
StructuredBuffer<float> GravityScales;

RWStructuredBuffer<uint> SpatialKeys;
RWStructuredBuffer<uint> SpatialOffsets;
StructuredBuffer<uint> SortedIndices;

const uint numParticles;
const float gravity;
const float deltaTime;
const float collisionDamping;
const float smoothingRadius;
const float targetDensity;
const float pressureMultiplier;
const float nearPressureMultiplier;
const float viscosityStrength;
const float2 boundsSize;
const float2 interactionInputPoint;
const float interactionInputStrength;
const float interactionInputRadius;

const float mouseGravityStrength;
const float mouseGravityRadius;
const int invertMouseGravity;
const float2 mousePosition;
const int gKeyPressed;

float DensityKernel(float dst, float radius)
{
    return SpikyKernelPow2(dst, radius);
}
float NearDensityKernel(float dst, float radius)
{
    return SpikyKernelPow3(dst, radius);
}
float DensityDerivative(float dst, float radius)
{
    return DerivativeSpikyPow2(dst, radius);
}
float NearDensityDerivative(float dst, float radius)
{
    return DerivativeSpikyPow3(dst, radius);
}
float ViscosityKernel(float dst, float radius)
{
    return SmoothingKernelPoly6(dst, smoothingRadius);
}

float2 CalculateDensity(float2 pos)
{
    int2 originCell = GetCell2D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;
    float density = 0;
    float nearDensity = 0;

    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D(originCell + offsets2D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];

        while (currIndex < numParticles)
        {
            uint neighbourIndex = currIndex;
            currIndex++;

            uint neighbourKey = SpatialKeys[neighbourIndex];
            if (neighbourKey != key)
                break;

            float2 neighbourPos = PredictedPositions[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            if (sqrDstToNeighbour > sqrRadius)
                continue;

            float dst = sqrt(sqrDstToNeighbour);
            density += DensityKernel(dst, smoothingRadius);
            nearDensity += NearDensityKernel(dst, smoothingRadius);
        }
    }

    return float2(density, nearDensity);
}

float PressureFromDensity(float density)
{
    return (density - targetDensity) * pressureMultiplier;
}
float NearPressureFromDensity(float nearDensity)
{
    return nearPressureMultiplier * nearDensity;
}

float2 ExternalForces(float2 pos, float2 velocity, float gravityScale)
{
    float2 gravityAccel = float2(0, gravity * gravityScale);

    if (interactionInputStrength != 0)
    {
        float2 inputPointOffset = interactionInputPoint - pos;
        float sqrDst = dot(inputPointOffset, inputPointOffset);
        if (sqrDst < interactionInputRadius * interactionInputRadius)
        {
            float dst = sqrt(sqrDst);
            float edgeT = (dst / interactionInputRadius);
            float centreT = 1 - edgeT;
            float2 dirToCentre = inputPointOffset / max(dst, 0.0001);

            float2 interactionForce = dirToCentre * interactionInputStrength * centreT;
            gravityAccel += interactionForce;
            gravityAccel -= velocity * centreT * 0.5;
        }
    }

    return gravityAccel;
}

void HandleCollisions(uint particleIndex)
{
    float2 pos = Positions[particleIndex];
    float2 vel = Velocities[particleIndex];
    
    // Reset collision state at start of each frame
    int collisionIndices[4] = { -1, -1, -1, -1 };
    int consideredObstacles = 0;
    

    // 1. Boundary collisions
    const float2 halfSize = boundsSize * 0.5;
    float2 edgeDst = halfSize - abs(pos);
    float boundaryDamping = 0.8 * collisionDamping;

    if (edgeDst.x <= 0)
    {
        pos.x = halfSize.x * sign(pos.x);
        vel.x *= -boundaryDamping;
    }
    if (edgeDst.y <= 0)
    {
        pos.y = halfSize.y * sign(pos.y);
        vel.y *= -boundaryDamping;
    }

    // 2. Obstacle collisions
    for (int obstacleIdx = 0; obstacleIdx < MAX_OBSTACLES; obstacleIdx++)
    {
        if (obstacleIdx >= numObstacles)
            break;
        if (consideredObstacles >= 4)
            break;
        
        Obstacle obstacle = obstaclesBuffer[obstacleIdx];
        int vertexStart = obstacle.vertexStart;
        int vertexCount = obstacle.vertexCount;
        float lineWidth = obstacle.lineWidth;

        if (vertexCount < 3)
            continue;

        // 2a. Inside/Outside test using raycasting
        int intersections = 0;
        bool isInside = false;
        float minDistSq = FLT_MAX;
        float2 closestNormal = float2(0, 0);
        float2 closestPoint = float2(0, 0);
        float collisionPadding = 0.02 + lineWidth * 0.5; // Include line width in collision

        for (int j = 0; j < vertexCount; j++)
        {
            int nextJ = uint((j + 1)) % (uint) vertexCount;
            float2 a = verticesBuffer[vertexStart + j];
            float2 b = verticesBuffer[vertexStart + nextJ];

            // Raycasting test
            if ((a.y > pos.y) != (b.y > pos.y))
            {
                float t = (pos.y - a.y) / (b.y - a.y);
                float intersectX = a.x + t * (b.x - a.x);
                if (pos.x < intersectX)
                    intersections++;
            }

            // Find closest edge point
            float2 edge = b - a;
            float edgeLengthSq = dot(edge, edge);
            float t = clamp(dot(pos - a, edge) / edgeLengthSq, 0.0, 1.0);
            float2 pointOnEdge = a + t * edge;
            float2 offset = pos - pointOnEdge;
            float distSq = dot(offset, offset);
            
            if (distSq < minDistSq)
            {
                minDistSq = distSq;
                closestNormal = normalize(offset);
                closestPoint = pointOnEdge;
            }
        }
        
        isInside = ((uint) intersections % (uint) 2) == 1;
        
        if (sqrt(minDistSq) < areaToColorAroundObstacles)
        {
            // Store in next available slot
            collisionIndices[consideredObstacles] = obstacleIdx;
            consideredObstacles++;
        }

        // 2b. Collision response
        if (isInside || sqrt(minDistSq) < collisionPadding)
        {
            // Calculate penetration vector
            float penetration = collisionPadding - sqrt(minDistSq) + 0.001f;
            float2 correction = closestNormal * penetration;
            
            // Position correction
            pos += correction;
            
            // Velocity response
            float normalSpeed = dot(vel, closestNormal);
            if (normalSpeed < 0)
            {
                float2 tangent = float2(closestNormal.y, -closestNormal.x);
                float tangentSpeed = dot(vel, tangent);
                
                // Apply friction and bounce
                vel = tangent * tangentSpeed * 0.9f;
                vel -= closestNormal * normalSpeed * (0.3 + 0.7 * collisionDamping);
            }
        }
    }
    
    CollisionBuffer[particleIndex] = int4(collisionIndices[0], collisionIndices[1], collisionIndices[2], collisionIndices[3]);

    // Write back results
    Positions[particleIndex] =
pos;
    Velocities[particleIndex] = vel;
}

[numthreads(NumThreads, 1, 1)]
void ExternalForces(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;

    float gravityScale = GravityScales[id.x];
    float2 pos = Positions[id.x];
    float2 toMouse = mousePosition - pos;
    float mouseDist = length(toMouse);

    if (mouseDist < mouseGravityRadius && mouseDist > 0 && gKeyPressed)
    {
        float2 mouseDir = toMouse / mouseDist;
        float falloff = 1 - (mouseDist / mouseGravityRadius);
        float mouseInfluence = mouseGravityStrength * falloff;
        if (invertMouseGravity)
            mouseInfluence *= -1;
        gravityScale += mouseInfluence;
    }

    Velocities[id.x] += ExternalForces(pos, Velocities[id.x], gravityScale) * deltaTime;
    PredictedPositions[id.x] = pos + Velocities[id.x] * (1 / 120.0);
}

[numthreads(NumThreads, 1, 1)]
void UpdateSpatialHash(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;
    uint index = id.x;
    int2 cell = GetCell2D(PredictedPositions[index], smoothingRadius);
    uint hash = HashCell2D(cell);
    uint key = KeyFromHash(hash, numParticles);
    SpatialKeys[id.x] = key;
}

RWStructuredBuffer<float2> SortTarget_Positions;
RWStructuredBuffer<float2> SortTarget_PredictedPositions;
RWStructuredBuffer<float2> SortTarget_Velocities;

[numthreads(NumThreads, 1, 1)]
void Reorder(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;
    uint sortedIndex = SortedIndices[id.x];
    SortTarget_Positions[id.x] = Positions[sortedIndex];
    SortTarget_PredictedPositions[id.x] = PredictedPositions[sortedIndex];
    SortTarget_Velocities[id.x] = Velocities[sortedIndex];
}

[numthreads(NumThreads, 1, 1)]
void ReorderCopyback(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;
    Positions[id.x] = SortTarget_Positions[id.x];
    PredictedPositions[id.x] = SortTarget_PredictedPositions[id.x];
    Velocities[id.x] = SortTarget_Velocities[id.x];
}

[numthreads(NumThreads, 1, 1)]
void CalculateDensities(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;
    float2 pos = PredictedPositions[id.x];
    Densities[id.x] = CalculateDensity(pos);
}

[numthreads(NumThreads, 1, 1)]
void CalculatePressureForce(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;

    float density = Densities[id.x][0];
    float densityNear = Densities[id.x][1];
    float pressure = PressureFromDensity(density);
    float nearPressure = NearPressureFromDensity(densityNear);
    float2 pressureForce = 0;

    float2 pos = PredictedPositions[id.x];
    int2 originCell = GetCell2D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;

    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D(originCell + offsets2D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];

        while (currIndex < numParticles)
        {
            uint neighbourIndex = currIndex;
            currIndex++;

            if (neighbourIndex == id.x)
                continue;
            uint neighbourKey = SpatialKeys[neighbourIndex];
            if (neighbourKey != key)
                break;

            float2 neighbourPos = PredictedPositions[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            if (sqrDstToNeighbour > sqrRadius)
                continue;

            float dst = sqrt(sqrDstToNeighbour);
            float2 dirToNeighbour = dst > 0 ? offsetToNeighbour / dst : float2(0, 1);

            float neighbourDensity = Densities[neighbourIndex][0];
            float neighbourNearDensity = Densities[neighbourIndex][1];
            float neighbourPressure = PressureFromDensity(neighbourDensity);
            float neighbourNearPressure = NearPressureFromDensity(neighbourNearDensity);

            float sharedPressure = (pressure + neighbourPressure) * 0.5;
            float sharedNearPressure = (nearPressure + neighbourNearPressure) * 0.5;

            pressureForce += dirToNeighbour * DensityDerivative(dst, smoothingRadius) * sharedPressure / neighbourDensity;
            pressureForce += dirToNeighbour * NearDensityDerivative(dst, smoothingRadius) * sharedNearPressure / neighbourNearDensity;
        }
    }

    float2 acceleration = pressureForce / density;
    Velocities[id.x] += acceleration * deltaTime;
}

[numthreads(NumThreads, 1, 1)]
void CalculateViscosity(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;

    float2 pos = PredictedPositions[id.x];
    int2 originCell = GetCell2D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;
    float2 viscosityForce = 0;
    float2 velocity = Velocities[id.x];

    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D(originCell + offsets2D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];

        while (currIndex < numParticles)
        {
            uint neighbourIndex = currIndex;
            currIndex++;

            if (neighbourIndex == id.x)
                continue;
            uint neighbourKey = SpatialKeys[neighbourIndex];
            if (neighbourKey != key)
                break;

            float2 neighbourPos = PredictedPositions[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            if (sqrDstToNeighbour > sqrRadius)
                continue;

            float dst = sqrt(sqrDstToNeighbour);
            float2 neighbourVelocity = Velocities[neighbourIndex];
            viscosityForce += (neighbourVelocity - velocity) * ViscosityKernel(dst, smoothingRadius);
        }
    }
    Velocities[id.x] += viscosityForce * viscosityStrength * deltaTime;
}

[numthreads(NumThreads, 1, 1)]
void UpdatePositions(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;
    Positions[id.x] += Velocities[id.x] * deltaTime;
    HandleCollisions(id.x);
}
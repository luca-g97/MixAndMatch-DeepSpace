#pragma kernel ExternalForces_Wall
#pragma kernel UpdateSpatialHash_Wall
#pragma kernel Reorder_Wall
#pragma kernel ReorderCopyback_Wall
#pragma kernel CalculateDensities_Wall
#pragma kernel CalculatePressureForce_Wall
#pragma kernel CalculateViscosity_Wall
#pragma kernel UpdatePositions_Wall
#pragma kernel ResetCompactionCounter_Wall
#pragma kernel CompactAndMoveParticles_Wall
#pragma kernel CopyParticleTypeBuffer_Wall
#pragma kernel ClearRemovedParticlesBuffer_Wall

#include "./FluidMaths2D_Wall.hlsl"
#include "./SpatialHash_Wall.hlsl"

#define FLT_MAX 3.402823466e+38
#define MAX_OBSTACLES 256

struct ParticleData
{
    float2 position;
    float2 predictedPosition;
    float2 velocity;
    int2 particleType;
    int4 collision;
    float2 density;
    float gravityScale;
    float padding; // To match the C# struct layout
};

struct Obstacle
{
    float2 centre;
    int vertexStart;
    int vertexCount;
    float lineWidth;
    int obstacleType;
};

struct Current
{
    int vertexStart;
    int vertexCount;
    float maxVelocity;
    float width;
    float linearFactor;
};

// Buffers used across many kernels (can be RW)
RWStructuredBuffer<float2> Positions_Wall;
RWStructuredBuffer<float2> PredictedPositions_Wall;
RWStructuredBuffer<float2> Velocities_Wall;
RWStructuredBuffer<float2> Densities_Wall;
RWStructuredBuffer<float> GravityScales_Wall;
RWStructuredBuffer<int4> CollisionBuffer_Wall;
RWStructuredBuffer<int2> ParticleTypeBuffer_Wall;
RWStructuredBuffer<uint> SpatialKeys_Wall;
RWStructuredBuffer<uint> SpatialOffsets_Wall;
RWStructuredBuffer<int4> CopiedParticleTypeBuffer_Destination_Wall;

// Buffers that are read-only in most contexts
StructuredBuffer<uint> SortedIndices_Wall;
StructuredBuffer<Obstacle> ObstaclesBuffer_Wall;
StructuredBuffer<float2> VerticesBuffer_Wall;
StructuredBuffer<Current> CurrentsBuffer_Wall;
StructuredBuffer<float2> CurrentVerticesBuffer_Wall;
StructuredBuffer<int4> OriginalParticleTypeBuffer_Source_Wall;

// --- Buffers for Compaction Kernel ---
// NOTE: These are the destinations, so they MUST be RW (UAVs)
RWStructuredBuffer<ParticleData> SortTarget_Data_Wall;

// This is the atomic counter, it MUST be RW (UAV)
RWStructuredBuffer<int2> CompactionInfoBuffer_Wall;
RWStructuredBuffer<float4> RemovedParticlesBuffer_Wall;

StructuredBuffer<float2> Source_Positions_Wall;
StructuredBuffer<float2> Source_PredictedPositions_Wall;
StructuredBuffer<float2> Source_Velocities_Wall;
StructuredBuffer<float2> Source_Densities_Wall;
StructuredBuffer<float> Source_GravityScales_Wall;
StructuredBuffer<int2> Source_ParticleType_Wall;

// Aliases for the REORDERCOPYBACK kernel's source data
StructuredBuffer<ParticleData> CopySource_Data_Wall;

int numObstacles_Wall;
static const int NumThreads_Wall = 64;
int numCurrents_Wall;

const uint numParticles_Wall;
const float gravity_Wall;
const float deltaTime_Wall;
const float collisionDamping_Wall;
const float smoothingRadius_Wall;

float waterTargetDensity_Wall;
float waterPressureMultiplier_Wall;
float waterNearPressureMultiplier_Wall;
float waterViscosityStrength_Wall;
float oilTargetDensity_Wall;
float oilPressureMultiplier_Wall;
float oilNearPressureMultiplier_Wall;
float oilViscosityStrength_Wall;

const float2 boundsSize_Wall;
const float yOffset_Wall;

float DensityKernel_Wall(float dst, float radius)
{
    return SpikyKernelPow2_Wall(dst, radius);
}
float NearDensityKernel_Wall(float dst, float radius)
{
    return SpikyKernelPow3_Wall(dst, radius);
}
float DensityDerivative_Wall(float dst, float radius)
{
    return DerivativeSpikyPow2_Wall(dst, radius);
}
float NearDensityDerivative_Wall(float dst, float radius)
{
    return DerivativeSpikyPow3_Wall(dst, radius);
}
float ViscosityKernel_Wall(float dst, float radius)
{
    return SmoothingKernelPoly6_Wall(dst, smoothingRadius_Wall);
}

float ViscosityKernelSqr_Wall(float sqrDst, float sqrRadius)
{
    float val = max(0, sqrRadius - sqrDst);
    return Poly6ScalingFactor_Wall * val * val * val;
}

float2 CalculateDensity_Wall(float2 pos)
{
    int2 originCell = GetCell2D_Wall(pos, smoothingRadius_Wall);
    float sqrRadius = smoothingRadius_Wall * smoothingRadius_Wall;
    float density = 0;
    float nearDensity = 0;

    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D_Wall(originCell + offsets2D_Wall[i]);
        uint key = KeyFromHash_Wall(hash, numParticles_Wall);
        uint currIndex = SpatialOffsets_Wall[key];

        while (currIndex < numParticles_Wall)
        {
            uint neighbourIndex = currIndex;
            currIndex++;

            uint neighbourKey = SpatialKeys_Wall[neighbourIndex];
            if (neighbourKey != key)
                break;

            float2 neighbourPos = PredictedPositions_Wall[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            if (sqrDstToNeighbour > sqrRadius)
                continue;

            float dst = sqrt(sqrDstToNeighbour);
            density += DensityKernel_Wall(dst, smoothingRadius_Wall);
            nearDensity += NearDensityKernel_Wall(dst, smoothingRadius_Wall);
        }
    }

    return float2(density, nearDensity);
}

float PressureFromDensity_Wall(float density, float targetDensity, float pressureMultiplier)
{
    return (density - targetDensity) * pressureMultiplier;
}
float NearPressureFromDensity_Wall(float nearDensity, float nearPressureMultiplier)
{
    return nearPressureMultiplier * nearDensity;
}

float2 ExternalForces_Wall(float2 pos, float2 velocity, float gravityScale)
{
    return float2(0, gravity_Wall * gravityScale);
}

// Optimized HandleCollisions - Focused on reducing expensive operations (sqrt, normalization)
// and minimizing work inside the inner vertex loop after performance degradation was observed.
void HandleCollisions_Wall(uint particleIndex)
{
    // Initialize Process Flag for this particle for this collision step IF it's not already marked for removal globally.
    // This ensures that if a particle wasn't marked in a previous step, it starts fresh for this obstacle interaction.
    // However, if already marked by a previous obstacle in *this same HandleCollisions pass*, we don't want to reset.
    // The CPU will handle resetting flags globally after processing removals.
    // So, we only write to ParticleProcessFlags[particleIndex] upon detection.

    float2 pos = Positions_Wall[particleIndex];
    float2 vel = Velocities_Wall[particleIndex];
    int particleType = ParticleTypeBuffer_Wall[particleIndex][0];
    int particleProcessFlag = ParticleTypeBuffer_Wall[particleIndex][1];

    // If particle is already marked as non-participating (e.g. type -1), skip complex collision.
    // This check is vital if ParticleTypeBuffer can be set to -1 mid-step by this function.
    if (particleType < 0)
    {
        // Still perform boundary collisions for "dead" particles if desired, or just return.
        // For now, let's assume "dead" particles don't interact further.
        // However, boundary checks might still be useful to prevent them flying off to infinity
        // before CPU collects them. For simplicity in this change, we'll let them be.
        // The main boundary collision happens *after* this loop for all particles.
        // Re-applying boundary for already "removed" particles:
        const float2 halfSizeMinimal = boundsSize_Wall * 0.5;
        const float boundaryEpsilonMinimal = 0.001f;
        if (abs(pos.x) >= halfSizeMinimal.x)
        {
            pos.x = (halfSizeMinimal.x - boundaryEpsilonMinimal) * sign(pos.x);
            vel.x *= -collisionDamping_Wall;
        }
        if (pos.y >= halfSizeMinimal.y + yOffset_Wall)
        {
            pos.y = (halfSizeMinimal.y - boundaryEpsilonMinimal) * sign(pos.y) + yOffset_Wall;
            vel.y *= -collisionDamping_Wall;
        }
        if (pos.y <= -halfSizeMinimal.y + yOffset_Wall)
        {
            pos.y = (-halfSizeMinimal.y - boundaryEpsilonMinimal) * sign(pos.y) + yOffset_Wall; // Push slightly off boundary
            vel.y *= -collisionDamping_Wall; // Reflect and dampen normal velocity
        }

        Positions_Wall[particleIndex] = pos; // Write back potentially adjusted position/velocity
        Velocities_Wall[particleIndex] = vel;
        return;
    }


    // --- Pre-calculations (Avoid redundant calculations later) ---
    const float2 halfSize = boundsSize_Wall * 0.5;
    const float boundaryEpsilon = 0.001f; // Small offset for boundary push-off

    // --- 1. Boundary Collisions ---
    if (abs(pos.x) >= halfSize.x)
    {
        pos.x = (halfSize.x - boundaryEpsilon) * sign(pos.x);
        vel.x *= -collisionDamping_Wall;
    }
    if (pos.y >= halfSize.y + yOffset_Wall)
    {
        pos.y = (halfSize.y - boundaryEpsilon) * sign(pos.y) + yOffset_Wall;
        vel.y *= -collisionDamping_Wall;
    }
    if (pos.y <= -halfSize.y + yOffset_Wall)
    {
        pos.y = (-halfSize.y - boundaryEpsilon) * sign(pos.y) + yOffset_Wall;
        vel.y *= -collisionDamping_Wall;
    }

    // --- 2. Obstacle Collisions ---
    [loop]
    for (int obstacleIdx = 0; obstacleIdx < numObstacles_Wall && obstacleIdx < MAX_OBSTACLES; obstacleIdx++)
    {
        Obstacle obstacle = ObstaclesBuffer_Wall[obstacleIdx];
        if (obstacle.vertexCount < 2)
            continue;
        
		// Find closest point on obstacle polygon
        int intersections = 0;
        float minDistSq = FLT_MAX;
        float2 normalAtClosestPoint = float2(0, 0);

        [loop]
        for (int j = 0; j < obstacle.vertexCount; j++)
        {
            int nextJ = (uint) (j + 1) % (uint) obstacle.vertexCount;
            float2 a = VerticesBuffer_Wall[obstacle.vertexStart + j];
            float2 b = VerticesBuffer_Wall[obstacle.vertexStart + nextJ];
            float2 edge = b - a;
            float2 vecToA = pos - a;

            float edgeLengthSq = dot(edge, edge);
            float2 pointOnEdge = a + clamp(dot(vecToA, edge) / max(edgeLengthSq, 1e-6f), 0.0, 1.0) * edge;
            
            float2 offsetToPoint = pos - pointOnEdge;
            float distSq = dot(offsetToPoint, offsetToPoint);

            if (distSq < minDistSq)
            {
                minDistSq = distSq;
                if (distSq > 1e-6f)
                {
                    normalAtClosestPoint = normalize(pos - pointOnEdge);
                }
                else
                {
                    float2 edgeDir = normalize(edge);
                    normalAtClosestPoint = normalize(float2(-edgeDir.y, edgeDir.x));
                }
            }

            // Check for point-in-polygon using raycast
            if (obstacle.vertexCount >= 3 && ((a.y <= pos.y && pos.y < b.y) || (b.y <= pos.y && pos.y < a.y)))
            {
                if (abs(b.y - a.y) > 1e-6f)
                {
                    if (pos.x < a.x + (b.x - a.x) * (pos.y - a.y) / (b.y - a.y))
                    {
                        intersections++;
                    }
                }
            }
        } // --- End Inner Vertex Loop ---

        bool isInside = (obstacle.vertexCount >= 3) && ((uint(intersections) % 2) != 0);
        
        // Check only for colored particles
        if (particleType > 0)
        {
            if (obstacle.obstacleType == 2 && particleProcessFlag == -1 && isInside)
            {
                ParticleTypeBuffer_Wall[particleIndex][1] = obstacleIdx;
                break; // Exit loop once flagged, since it's going to be removed.
            }
        }

        // --- Collision Response (only for physical obstacles: type 0 Player, type 1 Static Obstacle) ---
        // And only if particle is still considered active (ParticleTypeBuffer[particleIndex] >= 0)
        float collisionPadding = 0;
        bool collisionDetected = isInside || (minDistSq < collisionPadding * collisionPadding);
        if (particleType >= 0 && collisionDetected && obstacle.obstacleType == 1)
        {
            float actualDistance = sqrt(minDistSq);
            float penetrationDepth;
            if (isInside)
            {
                penetrationDepth = actualDistance + collisionPadding;
            }
            else
            {
                penetrationDepth = collisionPadding - actualDistance;
            }
            pos += normalAtClosestPoint * (penetrationDepth + 0.001f);

            float normalSpeed = dot(vel, normalAtClosestPoint);
            if (normalSpeed < 0)
            {
                float2 tangentVel = vel - normalAtClosestPoint * normalSpeed;
                float2 normalVel = -normalAtClosestPoint * normalSpeed * collisionDamping_Wall;
                float friction = 0.1f;
                vel = tangentVel * (1.0f - friction) + normalVel;
            }
        } // --- End Collision Response ---
    } // --- End Outer Obstacle Loop ---
    
    Positions_Wall[particleIndex] = pos;
    Velocities_Wall[particleIndex] = vel;
}

[numthreads(NumThreads_Wall, 1, 1)]
void ExternalForces_Wall(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles_Wall)
        return;

    float gravityScale = GravityScales_Wall[id.x];
    float2 pos = Positions_Wall[id.x];

    Velocities_Wall[id.x] += ExternalForces_Wall(pos, Velocities_Wall[id.x], gravityScale) * deltaTime_Wall;
    PredictedPositions_Wall[id.x] = pos + Velocities_Wall[id.x] * (1 / 120.0);
}

[numthreads(NumThreads_Wall, 1, 1)]
void UpdateSpatialHash_Wall(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles_Wall)
        return;
    uint index = id.x;
    int2 cell = GetCell2D_Wall(PredictedPositions_Wall[index], smoothingRadius_Wall);
    uint hash = HashCell2D_Wall(cell);
    uint key = KeyFromHash_Wall(hash, numParticles_Wall);
    SpatialKeys_Wall[id.x] = key;
}

void ApplyCurrentForces_Wall(uint particleIndex, float2 pos)
{
    for (int currentIdx = 0; currentIdx < numCurrents_Wall; currentIdx++)
    {
        Current current = CurrentsBuffer_Wall[currentIdx];
        int numSegments = current.vertexCount - 1;
        
        if (numSegments < 1)
            continue;
        
        float closestDistSq = FLT_MAX;
        float2 closestDir = float2(0, 0);
        float maxStrength = 0;
        
        for (int segIdx = 0; segIdx < numSegments; segIdx++)
        {
            int pointIdx = current.vertexStart + segIdx;
            float2 a = CurrentVerticesBuffer_Wall[pointIdx];
            float2 b = CurrentVerticesBuffer_Wall[pointIdx + 1];
            
            float2 ab = b - a;
            float2 ap = pos - a;
            float lin_factor = clamp(dot(ap, ab) / dot(ab, ab), 0.0, 1.0);
            float2 closestPoint = a + lin_factor * ab;
            float2 toClosest = pos - closestPoint;
            float distSq = dot(toClosest, toClosest);
            
            if (distSq < current.width * current.width)
            {
                float dist = sqrt(distSq);
                float normalizedDist = dist / current.width;
                float strength = pow(abs(1.0 - normalizedDist), abs(1.0 + current.linearFactor));
                
                if (strength > maxStrength)
                {
                    maxStrength = strength;
                    closestDir = normalize(ab);
                    closestDistSq = distSq;
                }
            }
        }
        
        if (maxStrength > 0.001)
        {
            Velocities_Wall[particleIndex] += closestDir * current.maxVelocity * maxStrength;
        }
    }
}

[numthreads(NumThreads_Wall, 1, 1)]
void Reorder_Wall(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles_Wall)
        return;
    
    uint sortedIndex = SortedIndices_Wall[id.x];

    // Assemble the struct and write it once
    ParticleData p;
    p.position = Source_Positions_Wall[sortedIndex];
    p.predictedPosition = Source_PredictedPositions_Wall[sortedIndex];
    p.velocity = Source_Velocities_Wall[sortedIndex];
    p.particleType = Source_ParticleType_Wall[sortedIndex];
    p.collision = int4(-1, -1, -1, -1);
    p.density = Source_Densities_Wall[sortedIndex];
    p.gravityScale = Source_GravityScales_Wall[sortedIndex];
    p.padding = 0;
    
    SortTarget_Data_Wall[id.x] = p;
}

[numthreads(NumThreads_Wall, 1, 1)]
void ReorderCopyback_Wall(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles_Wall)
        return;

    // Read the struct once and unpack it
    ParticleData p = CopySource_Data_Wall[id.x];
    
    Positions_Wall[id.x] = p.position;
    PredictedPositions_Wall[id.x] = p.predictedPosition;
    Velocities_Wall[id.x] = p.velocity;
    ParticleTypeBuffer_Wall[id.x] = p.particleType;
    Densities_Wall[id.x] = p.density;
    GravityScales_Wall[id.x] = p.gravityScale;
}

[numthreads(NumThreads_Wall, 1, 1)]
void CalculateDensities_Wall(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles_Wall || ParticleTypeBuffer_Wall[id.x][0] == -1)
        return;
    float2 pos = PredictedPositions_Wall[id.x];
    Densities_Wall[id.x] = CalculateDensity_Wall(pos);
}

[numthreads(NumThreads_Wall, 1, 1)]
void CalculatePressureForce_Wall(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles_Wall || ParticleTypeBuffer_Wall[id.x][0] == -1)
        return;
    
    float targetDensity = ParticleTypeBuffer_Wall[id.x][0] == 0 ? waterTargetDensity_Wall : oilTargetDensity_Wall;
    float pressureMultiplier = ParticleTypeBuffer_Wall[id.x][0] == 0 ? waterPressureMultiplier_Wall : oilPressureMultiplier_Wall;
    float nearPressureMultiplier = ParticleTypeBuffer_Wall[id.x][0] == 0 ? waterNearPressureMultiplier_Wall : oilNearPressureMultiplier_Wall;
    
    float density = Densities_Wall[id.x][0];
    float densityNear = Densities_Wall[id.x][1];
    float pressure = PressureFromDensity_Wall(density, targetDensity, pressureMultiplier);
    float nearPressure = NearPressureFromDensity_Wall(densityNear, nearPressureMultiplier);
    float2 pressureForce = 0;

    float2 pos = PredictedPositions_Wall[id.x];
    int2 originCell = GetCell2D_Wall(pos, smoothingRadius_Wall);
    float sqrRadius = smoothingRadius_Wall * smoothingRadius_Wall;

    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D_Wall(originCell + offsets2D_Wall[i]);
        uint key = KeyFromHash_Wall(hash, numParticles_Wall);
        uint currIndex = SpatialOffsets_Wall[key];

        while (currIndex < numParticles_Wall)
        {
            uint neighbourIndex = currIndex;
            currIndex++;

            if (neighbourIndex == id.x)
                continue;
            uint neighbourKey = SpatialKeys_Wall[neighbourIndex];
            if (neighbourKey != key)
                break;

            float2 neighbourPos = PredictedPositions_Wall[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            if (sqrDstToNeighbour > sqrRadius)
                continue;
                
            // --- SAFETY CHECKS FOR NEIGHBOUR DENSITY ---
            float neighbourDensity = Densities_Wall[neighbourIndex][0];
            if (neighbourDensity < 0.0001)
            {
                continue;
            }
            float neighbourNearDensity = Densities_Wall[neighbourIndex][1];
            if (neighbourNearDensity < 0.0001)
            {
                continue;
            }
            // ------------------------------------------
            
            float dst = sqrt(sqrDstToNeighbour);
            float2 dirToNeighbour = dst > 0 ? offsetToNeighbour / dst : float2(0, 1);
            
            float neighbourTargetDensity = ParticleTypeBuffer_Wall[neighbourIndex][0] == 0 ? waterTargetDensity_Wall : oilTargetDensity_Wall;
            float neighbourPressureMultiplier = ParticleTypeBuffer_Wall[neighbourIndex][0] == 0 ? waterPressureMultiplier_Wall : oilPressureMultiplier_Wall;
            float neighbourNearPressureMultiplier = ParticleTypeBuffer_Wall[neighbourIndex][0] == 0 ? waterNearPressureMultiplier_Wall : oilNearPressureMultiplier_Wall;

            float neighbourPressure = PressureFromDensity_Wall(neighbourDensity, neighbourTargetDensity - density, neighbourPressureMultiplier);
            float neighbourNearPressure = NearPressureFromDensity_Wall(neighbourNearDensity, neighbourNearPressureMultiplier);

            float sharedPressure = (pressure + neighbourPressure) * 0.5;
            float sharedNearPressure = (nearPressure + neighbourNearPressure) * 0.5;

            pressureForce += dirToNeighbour * DensityDerivative_Wall(dst, smoothingRadius_Wall) * sharedPressure / neighbourDensity;
            pressureForce += dirToNeighbour * NearDensityDerivative_Wall(dst, smoothingRadius_Wall) * sharedNearPressure / neighbourNearDensity;
        }
    }

    // --- SAFETY CHECK FOR OWN DENSITY ---
    if (density < 0.0001)
    {
        return; // Particle is isolated, no pressure force to apply.
    }
    // ------------------------------------
    
    float2 acceleration = pressureForce / density;
    Velocities_Wall[id.x] += acceleration * deltaTime_Wall;
}

[numthreads(NumThreads_Wall, 1, 1)]
void CalculateViscosity_Wall(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles_Wall || ParticleTypeBuffer_Wall[id.x][0] == -1)
        return;
    if (Densities_Wall[id.x][0] < 0.0001)
        return;

    float2 pos = PredictedPositions_Wall[id.x];
    int2 originCell = GetCell2D_Wall(pos, smoothingRadius_Wall);
    float sqrRadius = smoothingRadius_Wall * smoothingRadius_Wall;
    float2 viscosityForce = 0;
    float2 velocity = Velocities_Wall[id.x];

    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D_Wall(originCell + offsets2D_Wall[i]);
        uint key = KeyFromHash_Wall(hash, numParticles_Wall);
        uint currIndex = SpatialOffsets_Wall[key];

        while (currIndex < numParticles_Wall)
        {
            uint neighbourIndex = currIndex;
            currIndex++;

            if (neighbourIndex == id.x)
                continue;

            uint neighbourKey = SpatialKeys_Wall[neighbourIndex];
            if (neighbourKey != key)
                break;

            float2 neighbourPos = PredictedPositions_Wall[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            if (sqrDstToNeighbour < sqrRadius)
            {
                // Use the new, faster function with squared distance
                float2 neighbourVelocity = Velocities_Wall[neighbourIndex];
                viscosityForce += (neighbourVelocity - velocity) * ViscosityKernelSqr_Wall(sqrDstToNeighbour, sqrRadius);
            }
        }
    }

    float viscosityStrength = ParticleTypeBuffer_Wall[id.x][0] == 0 ? waterViscosityStrength_Wall : oilViscosityStrength_Wall;
    Velocities_Wall[id.x] += viscosityForce * viscosityStrength * deltaTime_Wall;
}

[numthreads(NumThreads_Wall, 1, 1)]
void UpdatePositions_Wall(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles_Wall)
        return;
    
    ApplyCurrentForces_Wall(id.x, Positions_Wall[id.x]);
    HandleCollisions_Wall(id.x);
    
    Positions_Wall[id.x] += Velocities_Wall[id.x] * deltaTime_Wall;
}

[numthreads(1, 1, 1)]
void ResetCompactionCounter_Wall(uint3 id : SV_DispatchThreadID)
{
    CompactionInfoBuffer_Wall[0] = int2(0, 0);
}

[numthreads(64, 1, 1)]
void CompactAndMoveParticles_Wall(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles_Wall)
        return;

    int particleType = Source_ParticleType_Wall[id.x][0];
    int removalFlag = Source_ParticleType_Wall[id.x][1];
    
    // Compaction Step...
    uint newIndex;
    if (removalFlag != -1 && particleType > 0)
    {
        InterlockedAdd(CompactionInfoBuffer_Wall[0][1], 1, newIndex);

        float2 pos = Source_Positions_Wall[id.x];
        float2 vel = Source_Velocities_Wall[id.x];
    
        RemovedParticlesBuffer_Wall[newIndex] = float4((float) particleType, pos.x, vel.x, vel.y);
    }
    else
    {
        //Increment counter for staying particles
        InterlockedAdd(CompactionInfoBuffer_Wall[0][0], 1, newIndex);
        
        // Assemble the struct and write it once for the kept particle
        ParticleData p;
        p.position = Source_Positions_Wall[id.x];
        p.predictedPosition = Source_PredictedPositions_Wall[id.x];
        p.velocity = Source_Velocities_Wall[id.x];
        p.particleType = Source_ParticleType_Wall[id.x];
        p.particleType.y = -1; // Reset removal flag
        p.collision = int4(-1, -1, -1, -1);
        p.density = Source_Densities_Wall[id.x];
        p.gravityScale = Source_GravityScales_Wall[id.x];
        p.padding = 0;
        
        SortTarget_Data_Wall[newIndex] = p;
    }
}

[numthreads(256, 1, 1)]
void CopyParticleTypeBuffer_Wall(uint3 id : SV_DispatchThreadID)
{
    // Use the existing global 'numParticles' constant for the check.
    if (id.x >= numParticles_Wall)
    {
        return;
    }
    
    CopiedParticleTypeBuffer_Destination_Wall[id.x] = OriginalParticleTypeBuffer_Source_Wall[id.x];
}

[numthreads(256, 1, 1)]
void ClearRemovedParticlesBuffer_Wall(uint3 id : SV_DispatchThreadID)
{
    RemovedParticlesBuffer_Wall[id.x] = float4(-1, -1, -1, -1);
}
#pragma kernel ExternalForces_Wall
#pragma kernel UpdateSpatialHash_Wall
#pragma kernel Reorder_Wall
#pragma kernel ReorderCopyback_Wall
#pragma kernel CalculateDensities_Wall
#pragma kernel CalculatePressureForce_Wall
#pragma kernel CalculateViscosity_Wall
#pragma kernel UpdatePositions_Wall

#include "./FluidMaths2D_Wall.hlsl"
#include "./SpatialHash_Wall.hlsl"

#define FLT_MAX 3.402823466e+38
#define MAX_OBSTACLES 256

struct Obstacle
{
    float2 centre;
    int vertexStart;
    int vertexCount;
    float lineWidth;
    int obstacleType;
};

StructuredBuffer<Obstacle> ObstaclesBuffer_Wall;
StructuredBuffer<float2> VerticesBuffer_Wall;
RWStructuredBuffer<int4> CollisionBuffer_Wall;
RWStructuredBuffer<int2> ParticleTypeBuffer_Wall;

int numObstacles_Wall;
float areaToColorAroundObstacles_Wall;
float coloredAreaAroundObstaclesDivider_Wall;
static const int NumThreads_Wall = 64;

RWStructuredBuffer<float2> Positions_Wall;
RWStructuredBuffer<float2> PredictedPositions_Wall;
RWStructuredBuffer<float2> Velocities_Wall;
RWStructuredBuffer<float2> Densities_Wall;
StructuredBuffer<float> GravityScales_Wall;

RWStructuredBuffer<uint> SpatialKeys_Wall;
RWStructuredBuffer<uint> SpatialOffsets_Wall;
StructuredBuffer<uint> SortedIndices_Wall;

const uint numParticles_Wall;
const float gravity_Wall;
const float deltaTime_Wall;
const float collisionDamping_Wall;
const float smoothingRadius_Wall;

float waterTargetDensity_Wall;
float waterPressureMultiplier_Wall;
float waterNearPressureMultiplier_Wall;
float waterViscosityStrength_Wall;
float oilTargetDensity_Wall;
float oilPressureMultiplier_Wall;
float oilNearPressureMultiplier_Wall;
float oilViscosityStrength_Wall;

const float2 boundsSize_Wall;
const float yOffset_Wall;
const float2 interactionInputPoint_Wall;
const float interactionInputStrength_Wall;
const float interactionInputRadius_Wall;

const float mouseGravityStrength_Wall;
const float mouseGravityRadius_Wall;
const int invertMouseGravity_Wall;
const float2 mousePosition_Wall;
const int gKeyPressed_Wall;

float DensityKernel_Wall(float dst, float radius)
{
    return SpikyKernelPow2_Wall(dst, radius);
}
float NearDensityKernel_Wall(float dst, float radius)
{
    return SpikyKernelPow3_Wall(dst, radius);
}
float DensityDerivative_Wall(float dst, float radius)
{
    return DerivativeSpikyPow2_Wall(dst, radius);
}
float NearDensityDerivative_Wall(float dst, float radius)
{
    return DerivativeSpikyPow3_Wall(dst, radius);
}
float ViscosityKernel_Wall(float dst, float radius)
{
    return SmoothingKernelPoly6_Wall(dst, smoothingRadius_Wall);
}

float2 CalculateDensity_Wall(float2 pos)
{
    int2 originCell = GetCell2D_Wall(pos, smoothingRadius_Wall);
    float sqrRadius = smoothingRadius_Wall * smoothingRadius_Wall;
    float density = 0;
    float nearDensity = 0;

    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D_Wall(originCell + offsets2D_Wall[i]);
        uint key = KeyFromHash_Wall(hash, numParticles_Wall);
        uint currIndex = SpatialOffsets_Wall[key];

        while (currIndex < numParticles_Wall)
        {
            uint neighbourIndex = currIndex;
            currIndex++;

            uint neighbourKey = SpatialKeys_Wall[neighbourIndex];
            if (neighbourKey != key)
                break;

            float2 neighbourPos = PredictedPositions_Wall[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            if (sqrDstToNeighbour > sqrRadius)
                continue;

            float dst = sqrt(sqrDstToNeighbour);
            density += DensityKernel_Wall(dst, smoothingRadius_Wall);
            nearDensity += NearDensityKernel_Wall(dst, smoothingRadius_Wall);
        }
    }

    return float2(density, nearDensity);
}

float PressureFromDensity_Wall(float density, float targetDensity, float pressureMultiplier)
{
    return (density - targetDensity) * pressureMultiplier;
}
float NearPressureFromDensity_Wall(float nearDensity, float nearPressureMultiplier)
{
    return nearPressureMultiplier * nearDensity;
}

float2 ExternalForces_Wall(float2 pos, float2 velocity, float gravityScale)
{
    float2 gravityAccel = float2(0, gravity_Wall * gravityScale);

    if (interactionInputStrength_Wall != 0)
    {
        float2 inputPointOffset = interactionInputPoint_Wall - pos;
        float sqrDst = dot(inputPointOffset, inputPointOffset);
        if (sqrDst < interactionInputRadius_Wall * interactionInputRadius_Wall)
        {
            float dst = sqrt(sqrDst);
            float edgeT = (dst / interactionInputRadius_Wall);
            float centreT = 1 - edgeT;
            float2 dirToCentre = inputPointOffset / max(dst, 0.0001);

            float2 interactionForce = dirToCentre * interactionInputStrength_Wall * centreT;
            gravityAccel += interactionForce;
            gravityAccel -= velocity * centreT * 0.5;
        }
    }

    return gravityAccel;
}

// Optimized HandleCollisions - Focused on reducing expensive operations (sqrt, normalization)
// and minimizing work inside the inner vertex loop after performance degradation was observed.
void HandleCollisions_Wall(uint particleIndex)
{
    // Initialize Process Flag for this particle for this collision step IF it's not already marked for removal globally.
    // This ensures that if a particle wasn't marked in a previous step, it starts fresh for this obstacle interaction.
    // However, if already marked by a previous obstacle in *this same HandleCollisions pass*, we don't want to reset.
    // The CPU will handle resetting flags globally after processing removals.
    // So, we only write to ParticleProcessFlags[particleIndex] upon detection.

    float2 pos = Positions_Wall[particleIndex];
    float2 vel = Velocities_Wall[particleIndex];
    int particleType = ParticleTypeBuffer_Wall[particleIndex][0];
    int particleProcessFlag = ParticleTypeBuffer_Wall[particleIndex][1];

    // If particle is already marked as non-participating (e.g. type -1), skip complex collision.
    // This check is vital if ParticleTypeBuffer can be set to -1 mid-step by this function.
    if (particleType < 0)
    {
        // Still perform boundary collisions for "dead" particles if desired, or just return.
        // For now, let's assume "dead" particles don't interact further.
        // However, boundary checks might still be useful to prevent them flying off to infinity
        // before CPU collects them. For simplicity in this change, we'll let them be.
        // The main boundary collision happens *after* this loop for all particles.
        // Re-applying boundary for already "removed" particles:
        const float2 halfSizeMinimal = boundsSize_Wall * 0.5;
        const float boundaryEpsilonMinimal = 0.001f;
        if (abs(pos.x) >= halfSizeMinimal.x)
        {
            pos.x = (halfSizeMinimal.x - boundaryEpsilonMinimal) * sign(pos.x);
            vel.x *= -collisionDamping_Wall;
        }
        if (pos.y >= halfSizeMinimal.y + yOffset_Wall)
        {
            pos.y = (halfSizeMinimal.y - boundaryEpsilonMinimal) * sign(pos.y) + yOffset_Wall;
            vel.y *= -collisionDamping_Wall;
        }
        if (pos.y <= -halfSizeMinimal.y + yOffset_Wall)
        {
            pos.y = (-halfSizeMinimal.y - boundaryEpsilonMinimal) * sign(pos.y) + yOffset_Wall; // Push slightly off boundary
            vel.y *= -collisionDamping_Wall; // Reflect and dampen normal velocity
        }

        Positions_Wall[particleIndex] = pos; // Write back potentially adjusted position/velocity
        Velocities_Wall[particleIndex] = vel;
        return;
    }


    // --- Pre-calculations (Avoid redundant calculations later) ---
    const float2 halfSize = boundsSize_Wall * 0.5;
    const float boundaryEpsilon = 0.001f; // Small offset for boundary push-off

    float areaToColorAroundObstaclesSq = areaToColorAroundObstacles_Wall * areaToColorAroundObstacles_Wall;
    float secondaryColorDist = areaToColorAroundObstacles_Wall + coloredAreaAroundObstaclesDivider_Wall;
    float secondaryColorDistSq = secondaryColorDist * secondaryColorDist;

    int collisionIndices[4] = { -1, -1, -1, -1 };
    int consideredObstacles = 0;

    // --- 1. Boundary Collisions ---
    if (abs(pos.x) >= halfSize.x)
    {
        pos.x = (halfSize.x - boundaryEpsilon) * sign(pos.x);
        vel.x *= -collisionDamping_Wall;
    }
    if (pos.y >= halfSize.y + yOffset_Wall)
    {
        pos.y = (halfSize.y - boundaryEpsilon) * sign(pos.y) + yOffset_Wall;
        vel.y *= -collisionDamping_Wall;
    }
    if (pos.y <= -halfSize.y + yOffset_Wall)
    {
        pos.y = (-halfSize.y - boundaryEpsilon) * sign(pos.y) + yOffset_Wall;
        vel.y *= -collisionDamping_Wall;
    }


    // --- 2. Obstacle Collisions ---
    [loop]
    for (int obstacleIdx = 0; obstacleIdx < numObstacles_Wall && obstacleIdx < MAX_OBSTACLES; obstacleIdx++)
    {
        Obstacle obstacle = ObstaclesBuffer_Wall[obstacleIdx];
        int vertexStart = obstacle.vertexStart;
        int vertexCount = obstacle.vertexCount;

        if (vertexCount < 2)
            continue;

        float lineWidth = obstacle.lineWidth;
        float particleRadius = 0.1f; // TODO: Consider making this a uniform
        float collisionPadding = particleRadius + (lineWidth * 0.5f);
        float collisionPaddingSq = collisionPadding * collisionPadding;

        int intersections = 0;
        float minDistSq = FLT_MAX;
        float2 normalAtClosestPoint = float2(0, 0);

        [loop]
        for (int j = 0; j < vertexCount; j++)
        {
            int nextJ = uint(j + 1) % uint(vertexCount);
            float2 a = VerticesBuffer_Wall[vertexStart + j];
            float2 b = VerticesBuffer_Wall[vertexStart + nextJ];
            float2 edge = b - a;
            float2 vecToA = pos - a;

            float edgeLengthSq = dot(edge, edge);
            float2 pointOnEdge;
            if (edgeLengthSq > 1e-6f)
            {
                float t = clamp(dot(vecToA, edge) / edgeLengthSq, 0.0, 1.0);
                pointOnEdge = a + t * edge;
            }
            else
            {
                pointOnEdge = a;
            }

            float2 offsetToEdgePoint = pos - pointOnEdge;
            float distSq = dot(offsetToEdgePoint, offsetToEdgePoint);

            if (distSq < minDistSq)
            {
                minDistSq = distSq;
                if (distSq > 1e-6f)
                {
                    normalAtClosestPoint = normalize(offsetToEdgePoint);
                }
                else
                {
                    if (edgeLengthSq > 1e-6f)
                    {
                        float2 edgeDir = normalize(edge);
                        normalAtClosestPoint = normalize(float2(-edgeDir.y, edgeDir.x));
                    }
                    else
                    {
                        normalAtClosestPoint = float2(0, 1);
                    }
                }
            }

            if (vertexCount >= 3 && ((a.y <= pos.y && pos.y < b.y) || (b.y <= pos.y && pos.y < a.y)))
            {
                if (abs(b.y - a.y) > 1e-6f)
                {
                    float intersectX = a.x + (b.x - a.x) * (pos.y - a.y) / (b.y - a.y);
                    if (pos.x < intersectX)
                    {
                        intersections++;
                    }
                }
            }
        } // --- End Inner Vertex Loop ---

        bool isInside = (vertexCount >= 3) && ((uint(intersections) % 2) != 0);
        bool collisionDetected = isInside || (minDistSq < collisionPaddingSq);

        // --- Particle Removal and Coloring Logic ---
        // Check for removal condition FIRST. If removed, it might not need coloring.
        // Ensure particleType is still valid (>=0) before processing for removal by this obstacle.
        // ParticleProcessFlags[particleIndex] == 0 ensures we only mark it once per frame by the first Ventil/Player it hits.
        if (particleProcessFlag == -1 && isInside && particleType > 0 && (obstacle.obstacleType == 0 || obstacle.obstacleType == 2))
        {
            if (obstacle.obstacleType == 0) // Player
            {
                ParticleTypeBuffer_Wall[particleIndex][1] = obstacleIdx; // Mark for removal by Player
            }
            else if (obstacle.obstacleType == 2)
            {
                ParticleTypeBuffer_Wall[particleIndex][1] = -2; // Mark for removal by Ventil
            }
        }


        // Coloring Logic (only if not marked for removal by this obstacle pass or is not a Player obstacle)
        // Check particleType again because it might have been set to -1 by the removal logic above.
        // And ensure ParticleProcessFlags is still 0, meaning it wasn't just marked for removal by *this* obstacle.
        // (If it was marked by a *previous* obstacle in this loop, particleType would already be -1, failing the ParticleTypeBuffer[particleIndex] >=0 check for coloring)
        if (ParticleTypeBuffer_Wall[particleIndex][1] != -2 && particleType > 0 && obstacle.obstacleType == 0) // Only color if particle is active and obstacle is a player
        {
            if (consideredObstacles < 4)
            {
                if (minDistSq < areaToColorAroundObstaclesSq)
                {
                    collisionIndices[consideredObstacles] = obstacleIdx;
                    consideredObstacles++;
                }
                else if (minDistSq < secondaryColorDistSq)
                {
                    collisionIndices[consideredObstacles] = -2; // Special marker for secondary color
                    consideredObstacles++;
                }
            }
        }


        // --- Collision Response (only for physical obstacles: type 0 Player, type 1 Static Obstacle) ---
        // And only if particle is still considered active (ParticleTypeBuffer[particleIndex] >= 0)
        if (particleType >= 0 && collisionDetected && (obstacle.obstacleType == 0 || obstacle.obstacleType == 1))
        {
            float actualDistance = sqrt(minDistSq);
            float penetrationDepth;
            if (isInside)
            {
                penetrationDepth = actualDistance + collisionPadding;
            }
            else
            {
                penetrationDepth = collisionPadding - actualDistance;
            }
            penetrationDepth += 0.001f;

            pos += normalAtClosestPoint * penetrationDepth;

            float normalSpeed = dot(vel, normalAtClosestPoint);
            if (normalSpeed < 0)
            {
                float2 tangentVel = vel - normalAtClosestPoint * normalSpeed;
                float2 normalVel = -normalAtClosestPoint * normalSpeed * collisionDamping_Wall;
                float friction = 0.1f; // TODO: Make friction factor a uniform parameter.
                vel = tangentVel * (1.0f - friction) + normalVel;
            }
        } // --- End Collision Response ---
    } // --- End Outer Obstacle Loop ---
    
    CollisionBuffer_Wall[particleIndex] = int4(collisionIndices[0], collisionIndices[1], collisionIndices[2], collisionIndices[3]);
    Positions_Wall[particleIndex] = pos;
    Velocities_Wall[particleIndex] = vel;
}

[numthreads(NumThreads_Wall, 1, 1)]
void ExternalForces_Wall(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles_Wall)
        return;

    float gravityScale = GravityScales_Wall[id.x];
    float2 pos = Positions_Wall[id.x];
    float2 toMouse = mousePosition_Wall - pos;
    float mouseDist = length(toMouse);

    if (mouseDist < mouseGravityRadius_Wall && mouseDist > 0 && gKeyPressed_Wall)
    {
        float2 mouseDir = toMouse / mouseDist;
        float falloff = 1 - (mouseDist / mouseGravityRadius_Wall);
        float mouseInfluence = mouseGravityStrength_Wall * falloff;
        if (invertMouseGravity_Wall)
            mouseInfluence *= -1;
        gravityScale += mouseInfluence;
    }

    Velocities_Wall[id.x] += ExternalForces_Wall(pos, Velocities_Wall[id.x], gravityScale) * deltaTime_Wall;
    PredictedPositions_Wall[id.x] = pos + Velocities_Wall[id.x] * (1 / 120.0);
}

[numthreads(NumThreads_Wall, 1, 1)]
void UpdateSpatialHash_Wall(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles_Wall)
        return;
    uint index = id.x;
    int2 cell = GetCell2D_Wall(PredictedPositions_Wall[index], smoothingRadius_Wall);
    uint hash = HashCell2D_Wall(cell);
    uint key = KeyFromHash_Wall(hash, numParticles_Wall);
    SpatialKeys_Wall[id.x] = key;
}

RWStructuredBuffer<float2> SortTarget_Positions_Wall;
RWStructuredBuffer<float2> SortTarget_PredictedPositions_Wall;
RWStructuredBuffer<float2> SortTarget_Velocities_Wall;
RWStructuredBuffer<int2> SortTarget_ParticleType_Wall;

[numthreads(NumThreads_Wall, 1, 1)]
void Reorder_Wall(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles_Wall)
        return;
    uint sortedIndex = SortedIndices_Wall[id.x];
    SortTarget_Positions_Wall[id.x] = Positions_Wall[sortedIndex];
    SortTarget_PredictedPositions_Wall[id.x] = PredictedPositions_Wall[sortedIndex];
    SortTarget_Velocities_Wall[id.x] = Velocities_Wall[sortedIndex];
    SortTarget_ParticleType_Wall[id.x] = ParticleTypeBuffer_Wall[sortedIndex];
}

[numthreads(NumThreads_Wall, 1, 1)]
void ReorderCopyback_Wall(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles_Wall || ParticleTypeBuffer_Wall[id.x][0] == -1)
        return;
    Positions_Wall[id.x] = SortTarget_Positions_Wall[id.x];
    PredictedPositions_Wall[id.x] = SortTarget_PredictedPositions_Wall[id.x];
    Velocities_Wall[id.x] = SortTarget_Velocities_Wall[id.x];
    ParticleTypeBuffer_Wall[id.x] = SortTarget_ParticleType_Wall[id.x];
}

[numthreads(NumThreads_Wall, 1, 1)]
void CalculateDensities_Wall(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles_Wall || ParticleTypeBuffer_Wall[id.x][0] == -1)
        return;
    float2 pos = PredictedPositions_Wall[id.x];
    Densities_Wall[id.x] = CalculateDensity_Wall(pos);
}

[numthreads(NumThreads_Wall, 1, 1)]
void CalculatePressureForce_Wall(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles_Wall || ParticleTypeBuffer_Wall[id.x][0] == -1)
        return;
    
    float targetDensity = ParticleTypeBuffer_Wall[id.x][0] == 0 ? waterTargetDensity_Wall : oilTargetDensity_Wall;
    float pressureMultiplier = ParticleTypeBuffer_Wall[id.x][0] == 0 ? waterPressureMultiplier_Wall : oilPressureMultiplier_Wall;
    float nearPressureMultiplier = ParticleTypeBuffer_Wall[id.x][0] == 0 ? waterNearPressureMultiplier_Wall : oilNearPressureMultiplier_Wall;
    float density = Densities_Wall[id.x][0];
    float densityNear = Densities_Wall[id.x][1];
    float pressure = PressureFromDensity_Wall(density, targetDensity, pressureMultiplier);
    float nearPressure = NearPressureFromDensity_Wall(densityNear, nearPressureMultiplier);
    float2 pressureForce = 0;

    float2 pos = PredictedPositions_Wall[id.x];
    int2 originCell = GetCell2D_Wall(pos, smoothingRadius_Wall);
    float sqrRadius = smoothingRadius_Wall * smoothingRadius_Wall;

    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D_Wall(originCell + offsets2D_Wall[i]);
        uint key = KeyFromHash_Wall(hash, numParticles_Wall);
        uint currIndex = SpatialOffsets_Wall[key];

        while (currIndex < numParticles_Wall)
        {
            uint neighbourIndex = currIndex;
            currIndex++;

            if (neighbourIndex == id.x)
                continue;
            uint neighbourKey = SpatialKeys_Wall[neighbourIndex];
            if (neighbourKey != key)
                break;

            float2 neighbourPos = PredictedPositions_Wall[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            if (sqrDstToNeighbour > sqrRadius)
                continue;

            float dst = sqrt(sqrDstToNeighbour);
            float2 dirToNeighbour = dst > 0 ? offsetToNeighbour / dst : float2(0, 1);
            
            float neighbourTargetDensity = ParticleTypeBuffer_Wall[neighbourIndex][0] == 0 ? waterTargetDensity_Wall : oilTargetDensity_Wall;
            float neighbourPressureMultiplier = ParticleTypeBuffer_Wall[neighbourIndex][0] == 0 ? waterPressureMultiplier_Wall : oilPressureMultiplier_Wall;
            float neighbourNearPressureMultiplier = ParticleTypeBuffer_Wall[neighbourIndex][0] == 0 ? waterNearPressureMultiplier_Wall : oilNearPressureMultiplier_Wall;

            float neighbourDensity = Densities_Wall[neighbourIndex][0];
            float neighbourNearDensity = Densities_Wall[neighbourIndex][1];
            float neighbourPressure = PressureFromDensity_Wall(neighbourDensity, neighbourTargetDensity - density, neighbourPressureMultiplier);
            float neighbourNearPressure = NearPressureFromDensity_Wall(neighbourNearDensity, neighbourNearPressureMultiplier);

            float sharedPressure = (pressure + neighbourPressure) * 0.5;
            float sharedNearPressure = (nearPressure + neighbourNearPressure) * 0.5;

            pressureForce += dirToNeighbour * DensityDerivative_Wall(dst, smoothingRadius_Wall) * sharedPressure / neighbourDensity;
            pressureForce += dirToNeighbour * NearDensityDerivative_Wall(dst, smoothingRadius_Wall) * sharedNearPressure / neighbourNearDensity;
        }
    }

    float2 acceleration = pressureForce / density;
    Velocities_Wall[id.x] += acceleration * deltaTime_Wall;
}

[numthreads(NumThreads_Wall, 1, 1)]
void CalculateViscosity_Wall(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles_Wall || ParticleTypeBuffer_Wall[id.x][0] == -1)
        return;

    float2 pos = PredictedPositions_Wall[id.x];
    int2 originCell = GetCell2D_Wall(pos, smoothingRadius_Wall);
    float sqrRadius = smoothingRadius_Wall * smoothingRadius_Wall;
    float2 viscosityForce = 0;
    float2 velocity = Velocities_Wall[id.x];

    for (int i = 0; i < 9; i++)
    {
        uint hash = HashCell2D_Wall(originCell + offsets2D_Wall[i]);
        uint key = KeyFromHash_Wall(hash, numParticles_Wall);
        uint currIndex = SpatialOffsets_Wall[key];

        while (currIndex < numParticles_Wall)
        {
            uint neighbourIndex = currIndex;
            currIndex++;

            if (neighbourIndex == id.x)
                continue;
            uint neighbourKey = SpatialKeys_Wall[neighbourIndex];
            if (neighbourKey != key)
                break;

            float2 neighbourPos = PredictedPositions_Wall[neighbourIndex];
            float2 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            if (sqrDstToNeighbour > sqrRadius)
                continue;

            float dst = sqrt(sqrDstToNeighbour);
            float2 neighbourVelocity = Velocities_Wall[neighbourIndex];
            viscosityForce += (neighbourVelocity - velocity) * ViscosityKernel_Wall(dst, smoothingRadius_Wall);
        }
    }
    
    float viscosityStrength = ParticleTypeBuffer_Wall[id.x][0] == 0 ? waterViscosityStrength_Wall : oilViscosityStrength_Wall;
    Velocities_Wall[id.x] += viscosityForce * viscosityStrength * deltaTime_Wall;
}

[numthreads(NumThreads_Wall, 1, 1)]
void UpdatePositions_Wall(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles_Wall)
        return;
    Positions_Wall[id.x] += Velocities_Wall[id.x] * deltaTime_Wall;
    HandleCollisions_Wall(id.x);
}